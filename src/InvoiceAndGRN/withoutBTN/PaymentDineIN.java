package InvoiceAndGRN.withoutBTN;

import ClassPack.DB;
import ClassPack.Decimal_Formats;
import ClassPack.PoolManager;
import ClassPack.dateForm;
import InvoiceAndGRN.newInvoiceArsh;
import static InvoiceAndGRN.newInvoiceArsh.jTableDN;
import static InvoiceAndGRN.newInvoiceArsh.jTableTW;
import static InvoiceAndGRN.newInvoiceArsh.txtTWINVno;
import MainMenu.LoginFrame;
import ORM.CashBook;
import ORM.Customer;
import ORM.CustomerHasInvoice;
import ORM.Employees;
import ORM.EmployeesHasJobroals;
import ORM.Invoice;
import ORM.InvoiceCommissons;
import ORM.InvoiceDailyOrderNo;
import ORM.InvoiceHasCreditCard;
import ORM.InvoiceItems;
import ORM.InvoicePayment;
import ORM.InvoicePaymentInfo;
import ORM.Kot;
import ORM.Kotitems;
import ORM.Promotion;
import ORM.PromotionItems;
import ORM.RawItemStock;
import ORM.RawItems;
import ORM.RawItemsHasJobroals;
import ORM.ServiceChargeEmployee;
import ORM.TmpemployeesHasJobroals;
import com.alee.laf.WebLookAndFeel;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

public class PaymentDineIN extends javax.swing.JFrame {

    Double Total = 0.00;
    Double Discount = 0.00;
    boolean confirm = false;

    public PaymentDineIN() {
        initComponents();
        txtINTotal.setText(newInvoiceArsh.txtDNsetTotal.getText());
        txtINTotal2.setText(newInvoiceArsh.txtDNsetTotal.getText());
        txtBalance.setText(newInvoiceArsh.txtDNsetTotal.getText());
        cardpaymentsef();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCash = new javax.swing.JButton();
        btnCreadit = new javax.swing.JButton();
        jLabelSETpayType = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtINTotal = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCaGive = new javax.swing.JTextField();
        txtBalance = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnPay = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtProCode = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtINTotal2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        txtPaidamount = new javax.swing.JTextField();
        txt4digit = new javax.swing.JTextField();
        lbPaidamount = new javax.swing.JLabel();
        lbLastdigit = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnCash.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnCash.setText("Cash");
        btnCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCashActionPerformed(evt);
            }
        });

        btnCreadit.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnCreadit.setText("Credit");
        btnCreadit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreaditActionPerformed(evt);
            }
        });

        jLabelSETpayType.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        jLabelSETpayType.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelSETpayType.setText("Payment Type");

        jLabel2.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        jLabel2.setText("Invoice Total");

        txtINTotal.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        txtINTotal.setForeground(java.awt.Color.red);
        txtINTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtINTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtINTotalActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        jLabel3.setText("Cash Given");

        txtCaGive.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        txtCaGive.setForeground(java.awt.Color.blue);
        txtCaGive.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCaGive.setText("0.00");
        txtCaGive.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCaGiveFocusLost(evt);
            }
        });
        txtCaGive.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtCaGiveInputMethodTextChanged(evt);
            }
        });
        txtCaGive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCaGiveActionPerformed(evt);
            }
        });

        txtBalance.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        txtBalance.setForeground(java.awt.Color.green);
        txtBalance.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBalanceActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        jLabel4.setText("Balance");

        btnPay.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        btnPay.setText("Pay");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        jLabel5.setText("Promo Code");

        txtProCode.setEditable(false);
        txtProCode.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        txtProCode.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtProCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtProCodeFocusLost(evt);
            }
        });
        txtProCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtProCodeKeyPressed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        jLabel6.setText("Grand Total");

        txtINTotal2.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        txtINTotal2.setForeground(java.awt.Color.red);
        txtINTotal2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jButton1.setText("Card Payment");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtPaidamount.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtPaidamount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        txt4digit.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        lbPaidamount.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        lbPaidamount.setText("Paid Amount");

        lbLastdigit.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        lbLastdigit.setText("Last 4 Digit");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btnCash, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreadit, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnPay, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtINTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtCaGive, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbPaidamount, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbLastdigit, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtPaidamount, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txt4digit, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(jLabelSETpayType, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtProCode, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtINTotal2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCash, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreadit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelSETpayType, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtINTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProCode, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtINTotal2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCaGive, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPaidamount, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPaidamount, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt4digit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbLastdigit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(btnPay, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCashActionPerformed
        jLabelSETpayType.setText("Cash");
        cardpaymentsef();
    }//GEN-LAST:event_btnCashActionPerformed

    private void btnCreaditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreaditActionPerformed
        jLabelSETpayType.setText("Credit");
        cardpaymentsef();
    }//GEN-LAST:event_btnCreaditActionPerformed

    private void txtINTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtINTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtINTotalActionPerformed

    private void txtCaGiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCaGiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCaGiveActionPerformed

    private void txtBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBalanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBalanceActionPerformed

    private void txtProCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtProCodeFocusLost

//        try {
//
//            double discount = Double.parseDouble(txtProCode.getText());
//            double total = Double.parseDouble(txtINTotal.getText());
//
//            txtINTotal2.setText(Decimal_Formats.Price(total - discount));
//
//        } catch (Exception e) {
//        }

    }//GEN-LAST:event_txtProCodeFocusLost

    private void txtCaGiveInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtCaGiveInputMethodTextChanged

        try {

            double given = Double.parseDouble(txtCaGive.getText());
            double total = Double.parseDouble(txtINTotal2.getText());

            txtBalance.setText(Decimal_Formats.Price(given - total));

        } catch (Exception e) {
        }

    }//GEN-LAST:event_txtCaGiveInputMethodTextChanged

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed

        if (jLabelSETpayType.getText().equals("Cash") || jLabelSETpayType.getText().equals("Credit") || jLabelSETpayType.getText().equals("Card Payment")) {

            try {

                String text = txtProCode.getText();
                if (text.isEmpty()) {

                    text = "0.00";

                }

                Session openSession = PoolManager.getSessionFactory().openSession();
                Transaction beginTransaction = openSession.beginTransaction();

                Customer customer = new Customer();
                customer.setIdCustomer(newInvoiceArsh.cust.get(newInvoiceArsh.comboCustomerDN.getSelectedItem().toString().split(" - ")[1]));

                Invoice invoice = new Invoice();
                invoice.setInvoiceNo(newInvoiceArsh.txtDSetinvNo.getText());
                invoice.setInvoiceDate(dateForm.currentdate());
                invoice.setSubtotal(Double.parseDouble(txtINTotal.getText()));

                if (confirm == true) {
                    invoice.setDiscount(Double.parseDouble(txtINTotal.getText()) - Double.parseDouble(txtINTotal2.getText()));
                } else {
                    invoice.setDiscount(Double.parseDouble(text));
                }

                invoice.setNetTotal(Double.parseDouble(txtINTotal2.getText()));
                invoice.setIsDelete("Active");
                invoice.setCreatedBy(LoginFrame.user);
                invoice.setInvoiceType("Eat-in");
                invoice.setInvoiceStatus("Complete");

                invoice.setPromoCode("N/A");
                invoice.setPaymentType(jLabelSETpayType.getText());
                invoice.setInvoiceTime(dateForm.TimeNow());

                if (newInvoiceArsh.comboCustomerDN.getSelectedItem().toString().split(" - ")[0].equals("STAFF")) {

                    invoice.setIsStaff("STAFF");

                } else {

                    invoice.setIsStaff("NOTSTAFF");

                }

                openSession.save(invoice);

                InvoiceDailyOrderNo id = new InvoiceDailyOrderNo();
                id.setDaliyNo(newInvoiceArsh.txtOrderNoDN.getText());
                id.setInvoice(invoice);
                id.setInvoiceDate(dateForm.currentdate());
                id.setIsDelete("Active");

                openSession.save(id);

                InvoicePaymentInfo ipi = new InvoicePaymentInfo();
                ipi.setCashBalance(txtBalance.getText());
                ipi.setCashTenderd(txtCaGive.getText());
                ipi.setInvoice(invoice);
                ipi.setIsDelete("Active");

                openSession.save(ipi);

                Kot kot = new Kot();
                kot.setCreatedBy(LoginFrame.user);
                kot.setDate(dateForm.currentdateTime());
                kot.setInvoice(invoice);
                kot.setKotno(newInvoiceArsh.txtDSetinvNo.getText());
                kot.setIsDelete("Active");

                openSession.save(kot);

                CustomerHasInvoice chi = new CustomerHasInvoice();
                chi.setCustomer(customer);
                chi.setInvoice(invoice);

                openSession.save(chi);

                for (int i = 0; i < newInvoiceArsh.jTableDN.getRowCount(); i++) {

                    RawItems rawItems = new RawItems();
                    rawItems.setIdRawItems(Integer.parseInt(newInvoiceArsh.jTableDN.getValueAt(i, 0).toString()));

                    InvoiceItems invoiceItems = new InvoiceItems();
                    invoiceItems.setQty(Double.parseDouble(newInvoiceArsh.jTableDN.getValueAt(i, 3).toString()));
                    invoiceItems.setUnitPrice(Double.parseDouble(newInvoiceArsh.jTableDN.getValueAt(i, 2).toString()));
                    invoiceItems.setNetTotalItem(Double.parseDouble(newInvoiceArsh.jTableDN.getValueAt(i, 4).toString()));
                    invoiceItems.setIsDelete("Active");
                    invoiceItems.setInvoice(invoice);
                    invoiceItems.setRawItems(rawItems);

                    openSession.save(invoiceItems);

                    Kotitems kotitems = new Kotitems();
                    kotitems.setKot(kot);
                    kotitems.setQty(newInvoiceArsh.jTableDN.getValueAt(i, 3).toString());
                    kotitems.setRawItems(rawItems);

                    openSession.save(kotitems);

                    if (newInvoiceArsh.jTableDN.getValueAt(i, 6).toString().equals("YES")) {

                        Criteria createCriteria = openSession.createCriteria(RawItemStock.class);
                        createCriteria.createAlias("rawItems", "i");
                        createCriteria.add(Restrictions.eq("i.idRawItems", Integer.parseInt(newInvoiceArsh.jTableDN.getValueAt(i, 0).toString())));
                        RawItemStock uniqueResult = (RawItemStock) createCriteria.uniqueResult();
                        if (uniqueResult != null) {

                            uniqueResult.setQty(uniqueResult.getQty() - Double.parseDouble(newInvoiceArsh.jTableDN.getValueAt(i, 3).toString()));
                            openSession.update(uniqueResult);
                        }
                    }

                }

                CashBook cashBook = new CashBook();
                cashBook.setCreatedBy(LoginFrame.user);
                cashBook.setDate(dateForm.currentdate());
                cashBook.setDescription("Payment for Invoice " + newInvoiceArsh.txtDSetinvNo.getText());
                cashBook.setExpence(0.00);
//                cashBook.setIncome(Double.parseDouble(txtINTotal2.getText()));
                if (Double.parseDouble(txtBalance.getText()) >= 0) {
                    cashBook.setIncome(Double.parseDouble(txtINTotal2.getText()));
                } else {

                    cashBook.setIncome(Double.parseDouble(txtCaGive.getText()));

                }

                openSession.save(cashBook);

                if (jLabelSETpayType.getText().equals("Cash")) {

                    InvoicePayment invoicePayment = new InvoicePayment();
                    invoicePayment.setCustomer(customer);
                    invoicePayment.setInvoice(invoice);
                    invoicePayment.setIsDelete("Active");

                    if (Double.parseDouble(txtBalance.getText()) >= 0) {
                        invoicePayment.setPaymentAmount(Double.parseDouble(txtINTotal2.getText()));
                    } else {

                        invoicePayment.setPaymentAmount(Double.parseDouble(txtCaGive.getText()));

                    }

                    invoicePayment.setPaymentDate(dateForm.currentdate());
                    invoicePayment.setPaymentType("Cash");

                    openSession.save(invoicePayment);
                } else if (jLabelSETpayType.getText().equals("Credit")) {

                    InvoicePayment invoicePayment = new InvoicePayment();
                    invoicePayment.setCustomer(customer);
                    invoicePayment.setInvoice(invoice);
                    invoicePayment.setIsDelete("Active");
                    if (Double.parseDouble(txtBalance.getText()) >= 0) {
                        invoicePayment.setPaymentAmount(Double.parseDouble(txtINTotal2.getText()));
                    } else {

                        invoicePayment.setPaymentAmount(Double.parseDouble(txtCaGive.getText()));

                    }
                    invoicePayment.setPaymentDate(dateForm.currentdate());
                    invoicePayment.setPaymentType("Credit");

                    openSession.save(invoicePayment);

                } else {

                    if (!txt4digit.getText().isEmpty()) {

                        InvoiceHasCreditCard invoiceHasCreditCard = new InvoiceHasCreditCard();
                        InvoicePayment invoicePayment = new InvoicePayment();
                        invoicePayment.setCustomer(customer);
                        invoicePayment.setInvoice(invoice);
                        invoicePayment.setIsDelete("Active");
                        if (Double.parseDouble(txtBalance.getText()) >= 0) {
                            invoicePayment.setPaymentAmount(Double.parseDouble(txtINTotal2.getText()));
                        } else {

                            invoicePayment.setPaymentAmount(Double.parseDouble(txtCaGive.getText()) + Double.parseDouble(txtPaidamount.getText()));

                        }
                        invoicePayment.setPaymentDate(dateForm.currentdate());
                        invoicePayment.setPaymentType("Credit");

                        invoiceHasCreditCard.setInvoice(invoice);
                        invoiceHasCreditCard.setPaidAmount(Double.parseDouble(txtPaidamount.getText()));
                        invoiceHasCreditCard.setLast4digits(txt4digit.getText());
                        invoiceHasCreditCard.setIsDelete("Active");

                        openSession.save(invoiceHasCreditCard);
                        openSession.save(invoicePayment);

                    }
                }

                //add raw item commision...........................................................................
                Double TotCom = 0.00;

                for (int i = 0; i < jTableTW.getRowCount(); i++) {
                    Criteria cc = openSession.createCriteria(RawItemsHasJobroals.class);
                    cc.createAlias("rawItems", "ri");
                    cc.add(Restrictions.eq("ri.idRawItems", Integer.parseInt(jTableTW.getValueAt(i, 0).toString())));

                    List<RawItemsHasJobroals> list = cc.list();
                    for (RawItemsHasJobroals rawItemsHasJobroals : list) {

                        Criteria cc2 = openSession.createCriteria(EmployeesHasJobroals.class);
                        cc2.add(Restrictions.like("isDelete", "Active"));
                        cc2.createAlias("jobroals", "jr");
                        cc2.add(Restrictions.eq("jr.idJobroals", rawItemsHasJobroals.getJobroals().getIdJobroals()));

                        List<EmployeesHasJobroals> list1 = cc2.list();

                        for (EmployeesHasJobroals ej : list1) {
                            Employees employees = new Employees();
                            employees.setIdEmployees(ej.getEmployees().getIdEmployees());

                            RawItems rawItems = new RawItems();
                            rawItems.setIdRawItems(rawItemsHasJobroals.getRawItems().getIdRawItems());

                            InvoiceCommissons ic = new InvoiceCommissons();
                            ic.setEmployees(employees);
                            ic.setInvoice(invoice);
                            ic.setRawItems(rawItems);
                            ic.setCommAmount(rawItemsHasJobroals.getCommisonPerItem() * Double.parseDouble(jTableTW.getValueAt(i, 3).toString()));
                            ic.setPaidDate(dateForm.currentdate());
                            ic.setIsDelete("Active");

                            openSession.save(ic);
                        }

                    }

//                    RawItemsHasJobroals uniqueResult = (RawItemsHasJobroals) cc.uniqueResult();
//
//                    if (uniqueResult != null) {
//                        Criteria cc1 = openSession.createCriteria(TmpemployeesHasJobroals.class);
//                        cc1.add(Restrictions.like("startDate", dateForm.currentdate()));
//                        cc1.add(Restrictions.like("isDelete", "Active"));
//                        cc1.createAlias("jobroals", "jr");
//                        cc1.add(Restrictions.eq("jr.idJobroals", uniqueResult.getJobroals().getIdJobroals()));
//
//                        List<TmpemployeesHasJobroals> list = cc1.list();
//                        int getListSize = list.size();
//
//                        if (getListSize > 0) {
//                            for (TmpemployeesHasJobroals tj : list) {
//                                Employees employees = new Employees();
//                                employees.setIdEmployees(tj.getEmployees().getIdEmployees());
//
//                                RawItems rawItems = new RawItems();
//                                rawItems.setIdRawItems(uniqueResult.getRawItems().getIdRawItems());
//
//                                InvoiceCommissons ic = new InvoiceCommissons();
//                                ic.setEmployees(employees);
//                                ic.setInvoice(invoice);
//                                ic.setRawItems(rawItems);
//                                ic.setCommAmount(uniqueResult.getCommisonPerItem() * Double.parseDouble(jTableDN.getValueAt(i, 3).toString()));
//                                ic.setPaidDate(dateForm.currentdate());
//                                ic.setIsDelete("Active");
//
//                                openSession.save(ic);
//                            }
//                        } else {
//
//                            Criteria cc2 = openSession.createCriteria(EmployeesHasJobroals.class);
//                            cc2.add(Restrictions.like("isDelete", "Active"));
//                            cc2.createAlias("jobroals", "jr");
//                            cc2.add(Restrictions.eq("jr.idJobroals", uniqueResult.getJobroals().getIdJobroals()));
//
//                            List<EmployeesHasJobroals> list1 = cc2.list();
//
//                            for (EmployeesHasJobroals ej : list1) {
//                                Employees employees = new Employees();
//                                employees.setIdEmployees(ej.getEmployees().getIdEmployees());
//
//                                RawItems rawItems = new RawItems();
//                                rawItems.setIdRawItems(uniqueResult.getRawItems().getIdRawItems());
//
//                                InvoiceCommissons ic = new InvoiceCommissons();
//                                ic.setEmployees(employees);
//                                ic.setInvoice(invoice);
//                                ic.setRawItems(rawItems);
//                                ic.setCommAmount(uniqueResult.getCommisonPerItem() * Double.parseDouble(jTableDN.getValueAt(i, 3).toString()));
//                                ic.setPaidDate(dateForm.currentdate());
//                                ic.setIsDelete("Active");
//
//                                openSession.save(ic);
//                            }
//
//                        }
//                    }
                }//end add raw item commision...........................................................................

                beginTransaction.commit();

                try {
                    Map<String, Object> map = new HashMap<String, Object>();
                    map.put("InvID", invoice.getIdInvoice());
                    System.out.println(map);
                    JasperPrint jp = JasperFillManager.fillReport(LoginFrame.Invoice, map, DB.getCon());
//                    JasperViewer.viewReport(jp, false);
                    JasperPrintManager.printReport(jp, false);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

                openSession.close();

                newInvoiceArsh.comboCustomerDN.setSelectedIndex(0);

                DefaultTableModel dtm = (DefaultTableModel) newInvoiceArsh.jTableDN.getModel();
                dtm.setRowCount(0);
                newInvoiceArsh.txtDNsetTotal.setText("0.00");
                newInvoiceArsh.LoadInvNo();
                this.dispose();

            } catch (Exception e) {

                e.printStackTrace();

            }

        } else {

            JOptionPane.showMessageDialog(null, "Select Pay Type");

        }


    }//GEN-LAST:event_btnPayActionPerformed

    private void txtCaGiveFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCaGiveFocusLost
        try {

            double given = Double.parseDouble(txtCaGive.getText());
            double total = Double.parseDouble(txtINTotal2.getText());

            txtBalance.setText(Decimal_Formats.Price(given - total));

        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtCaGiveFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jLabelSETpayType.setText("Card Payment");
        cardpaymentset();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtProCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProCodeKeyPressed
        if (evt.getKeyCode() == 10) {

            Session openSession = PoolManager.getSessionFactory().openSession();

            Criteria cc = openSession.createCriteria(Promotion.class);
            cc.add(Restrictions.eq("promotionCode", txtProCode.getText()));
            cc.add(Restrictions.like("isDelete", "Active"));
            Promotion uniqueResult = (Promotion) cc.uniqueResult();

            if (uniqueResult != null) {
                int showConfirmDialog = JOptionPane.showConfirmDialog(null, "Do you want add promotion?",
                        "", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                if (showConfirmDialog == 0) {

                    Criteria cc1 = openSession.createCriteria(PromotionItems.class);
                    cc1.createAlias("promotion", "p");
                    cc1.add(Restrictions.like("p.isDelete", "Active"));
                    cc1.add(Restrictions.eq("p.promotionCode", txtProCode.getText()));

                    List<PromotionItems> list = cc1.list();

                    Double sum = 0.00;
                    for (PromotionItems pi : list) {
                        //System.out.println("pro " + pi.getRawItems().getIdRawItems());
                        int proItemID = pi.getRawItems().getIdRawItems();
                        for (int i = 0; i < newInvoiceArsh.jTableDN.getRowCount(); i++) {
                            //System.out.println("TW "+newInvoiceArsh.jTableTW.getValueAt(i, 0).toString() );
                            int TWItemID = Integer.parseInt(newInvoiceArsh.jTableDN.getValueAt(i, 0).toString());
                            if (proItemID == TWItemID) {
                                double getsum = Double.parseDouble(newInvoiceArsh.jTableDN.getValueAt(i, 4).toString());
                                sum = getsum + sum;
                                //System.out.println(sum);
                                Total = sum;
                            }
                        }
                        Double dis = sum - pi.getPromotion().getDiscountAmountRs();
                        Discount = dis;
                        confirm = true;

                        Double d = Double.parseDouble(txtINTotal.getText()) - pi.getPromotion().getDiscountAmountRs();
                        txtINTotal2.setText("" + Decimal_Formats.Price(d));
                        txtBalance.setText("" + Decimal_Formats.Price(d));

                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Enterd promo code doesn't have");
            }

        }
    }//GEN-LAST:event_txtProCodeKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WebLookAndFeel.install();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaymentDineIN().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCash;
    private javax.swing.JButton btnCreadit;
    private javax.swing.JButton btnPay;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelSETpayType;
    private javax.swing.JLabel lbLastdigit;
    private javax.swing.JLabel lbPaidamount;
    private javax.swing.JTextField txt4digit;
    private javax.swing.JTextField txtBalance;
    private javax.swing.JTextField txtCaGive;
    private javax.swing.JTextField txtINTotal;
    private javax.swing.JTextField txtINTotal2;
    private javax.swing.JTextField txtPaidamount;
    private javax.swing.JTextField txtProCode;
    // End of variables declaration//GEN-END:variables

    private void cardpaymentsef() {
        txt4digit.setVisible(false);
        txtPaidamount.setVisible(false);
        lbLastdigit.setVisible(false);
        lbPaidamount.setVisible(false);

    }

    private void cardpaymentset() {

        txt4digit.setVisible(true);
        txtPaidamount.setVisible(true);
        lbLastdigit.setVisible(true);
        lbPaidamount.setVisible(true);

    }
}
