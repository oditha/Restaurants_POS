/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InvoiceAndGRN.withoutBTN;

import ClassPack.Decimal_Formats;
import ClassPack.PoolManager;
import static InvoiceAndGRN.DaillySalesSummeryUdaya.TxtStartDate;
import static InvoiceAndGRN.DaillySalesSummeryUdaya.comboType;
import static InvoiceAndGRN.DaillySalesSummeryUdaya.txtEndDate;
import ORM.CustomerHasInvoice;
import ORM.Invoice;
import ORM.InvoiceItems;
import java.util.Iterator;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author udaya
 */
public class DailyStaffSummery extends javax.swing.JFrame {

    /**
     * Creates new form DailyStaffSummery
     */
    public DailyStaffSummery() {
        initComponents();
        jTable1.setRowHeight(25);
//        loadData();
        tableAlign();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        txtInvoice = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("View Staff Invoice");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Sold QTY", "Net Total"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel14.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel14.setText("Invoice Total");

        txtInvoice.setFont(new java.awt.Font("Noto Sans", 1, 15)); // NOI18N
        txtInvoice.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtInvoice.setText("0.00");

        jLabel6.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        jLabel6.setText("LKR");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(795, Short.MAX_VALUE)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(txtInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(94, 94, 94))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(92, 92, 92)
                    .addComponent(jScrollPane1)
                    .addGap(93, 93, 93)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(442, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtInvoice)
                        .addComponent(jLabel6))
                    .addComponent(jLabel14))
                .addGap(91, 91, 91))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(31, 31, 31)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGap(134, 134, 134)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DailyStaffSummery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DailyStaffSummery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DailyStaffSummery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DailyStaffSummery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DailyStaffSummery().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel14;
    public javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    public javax.swing.JLabel txtInvoice;
    // End of variables declaration//GEN-END:variables

    private void loadData() {

        try {

            if (comboType.getSelectedIndex() == 0) {

                Session openSession = PoolManager.getSessionFactory().openSession();
                Criteria createCriteria = openSession.createCriteria(Invoice.class);
                createCriteria.add(Restrictions.eq("invoiceDate", TxtStartDate.getText()));
                createCriteria.add(Restrictions.eq("isDelete", "Active"));
                List<Invoice> list = createCriteria.list();

                DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                dtm.setRowCount(0);

                for (Invoice invoice : list) {

                    Iterator iterator = invoice.getInvoiceItemses().iterator();
                    while (iterator.hasNext()) {

                        Iterator iterator1 = invoice.getCustomerHasInvoices().iterator();

                        while (iterator1.hasNext()) {
                            CustomerHasInvoice next = (CustomerHasInvoice) iterator1.next();

                            if (next.getCustomer().getName().equals("STAFF")) {

                                InvoiceItems ii = (InvoiceItems) iterator.next();

                                String itemCode = ii.getRawItems().getRawItemsCode();
                                String iitemName = ii.getRawItems().getItemName();

                                Double qty = ii.getQty();
                                Double nettTotal = ii.getNetTotalItem();

                                //double profit = nettTotal * qty;
                                dtm.addRow(new Object[]{
                                    itemCode,
                                    iitemName,
                                    qty,
                                    Decimal_Formats.Price(nettTotal), //Decimal_Formats.Price(profit)
                                });

                            }

                        }

                    }

                }

                double nettot = 0;

                for (int i = 0; i < jTable1.getRowCount(); i++) {

                    nettot += Double.parseDouble(jTable1.getValueAt(i, 3).toString());
                }

                txtInvoice.setText(Decimal_Formats.Price(nettot) + "");

            } else {

                Session openSession = PoolManager.getSessionFactory().openSession();
                Criteria createCriteria = openSession.createCriteria(Invoice.class);
                createCriteria.add(Restrictions.between("invoiceDate", TxtStartDate.getText(), txtEndDate.getText()));
                createCriteria.add(Restrictions.eq("isDelete", "Active"));
                List<Invoice> list = createCriteria.list();

                DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                dtm.setRowCount(0);

                for (Invoice invoice : list) {

                    Iterator iterator = invoice.getInvoiceItemses().iterator();
                    while (iterator.hasNext()) {

                        Iterator iterator1 = invoice.getCustomerHasInvoices().iterator();

                        while (iterator1.hasNext()) {
                            CustomerHasInvoice next = (CustomerHasInvoice) iterator1.next();

                            if (next.getCustomer().getName().equals("STAFF")) {

                                InvoiceItems ii = (InvoiceItems) iterator.next();

                                String itemCode = ii.getRawItems().getRawItemsCode();
                                String iitemName = ii.getRawItems().getItemName();

                                Double qty = ii.getQty();
                                Double nettTotal = ii.getNetTotalItem();

                                //double profit = nettTotal * qty;
                                dtm.addRow(new Object[]{
                                    itemCode,
                                    iitemName,
                                    qty,
                                    Decimal_Formats.Price(nettTotal), //Decimal_Formats.Price(profit)
                                });

                            }

                        }

                    }

                }

                double nettot = 0;

                for (int i = 0; i < jTable1.getRowCount(); i++) {

                    nettot += Double.parseDouble(jTable1.getValueAt(i, 3).toString());

                }

                txtInvoice.setText(Decimal_Formats.Price(nettot) + "");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    
    
        private void tableAlign() {

        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        jTable1.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        jTable1.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);

    }

}
