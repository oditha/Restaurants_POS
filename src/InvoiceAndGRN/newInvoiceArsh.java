/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InvoiceAndGRN;

import InvoiceAndGRN.withoutBTN.PaymentTakeAway;
import InvoiceAndGRN.withoutBTN.AddInvoiceQTYTakeAway;
import InvoiceAndGRN.withoutBTN.PaymentDineIN;
import InvoiceAndGRN.withoutBTN.AddInvoiceQTYDineIN;
import ClassPack.DB;
import ClassPack.Decimal_Formats;
import ClassPack.ItemDataHolder;
import ClassPack.KOTHolder;
import ClassPack.NotificationPopup;
import ClassPack.PoolManager;
import ClassPack.dateForm;
import Customers.AddCustomersUdaya1;
import MainMenu.LoginFrame;
import ORM.AllowanceHasEmployees;
import ORM.CashBook;
import ORM.Customer;
import ORM.CustomerHasInvoice;
import ORM.FoodItemInfo;
import ORM.Invoice;
import ORM.InvoiceDailyOrderNo;
import ORM.InvoiceHasTable;
import ORM.InvoiceItems;
import ORM.InvoicePayment;
import ORM.Kot;
import ORM.Kotitems;
import ORM.RawItemStock;
import ORM.RawItems;
import ORM.RowItemCatagory;
import ORM.Table;
import com.alee.laf.WebLookAndFeel;
import groovy.model.DefaultTableModel;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author arshak
 */
public class newInvoiceArsh extends javax.swing.JFrame {

    private Map<String, Integer> cato = new HashMap();
    public static Map<String, ItemDataHolder> ItemDataTW = new HashMap();
    public static Map<String, ItemDataHolder> ItemDataDN = new HashMap();
    public static Map<String, Integer> cust = new HashMap();
    public static Map<String, Integer> Table = new HashMap();
    ArrayList<KOTHolder> holder = new ArrayList<>();
    Map<String, Integer> rowcount = new HashMap();

//    public static String ItemCode;
    static boolean maximized = true;

    public static String DailyNoDN;
    public static String DailyNoTW;

    public newInvoiceArsh() {
        initComponents();
        setmaximized();
        tablerowset();
        loadCatogory();
        ComboToTXT2();
        ComboToTXT2DN();
        LoadInvNo();
//        LoadDailyNO();
        loadInvTable();
        loadPendigInvoice();
        tableAlign();
        jListTWCatagory.setFixedCellHeight(40);
        jListTWCaItem.setFixedCellHeight(40);
        jListDCaItem.setFixedCellHeight(40);
        jListDCatagory.setFixedCellHeight(40);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnTWcancel = new javax.swing.JButton();
        btnTWReitem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTW = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListTWCatagory = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListTWCaItem = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        txtTWINVno = new javax.swing.JLabel();
        btnTWprintKOt1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtTWsetTotal = new javax.swing.JLabel();
        comboCustomer = new javax.swing.JComboBox<>();
        txtTOrderNoTW = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jListDCaItem = new javax.swing.JList();
        jScrollPane7 = new javax.swing.JScrollPane();
        jListDCatagory = new javax.swing.JList();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnDcancel = new javax.swing.JButton();
        btnDReItem = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtDSetinvNo = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        comboTable = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        btnDCheckout1 = new javax.swing.JButton();
        btnDprintKOt2 = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableDN = new javax.swing.JTable();
        txtDNsetTotal = new javax.swing.JLabel();
        comboCustomerDN = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        txtOrderNoDN = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTablePending = new javax.swing.JTable();
        btnPendiComplte = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Invoice");

        jTabbedPane1.setForeground(new java.awt.Color(94, 108, 92));
        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N

        jPanel1.setPreferredSize(new java.awt.Dimension(1024, 768));

        jLabel2.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel2.setText("Invoice No");

        jLabel3.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel3.setText("Select Customer");

        btnTWcancel.setBackground(javax.swing.UIManager.getDefaults().getColor("TextArea.selectionBackground"));
        btnTWcancel.setFont(new java.awt.Font("Noto Sans", 1, 16)); // NOI18N
        btnTWcancel.setText("Cancel");
        btnTWcancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTWcancelActionPerformed(evt);
            }
        });

        btnTWReitem.setBackground(javax.swing.UIManager.getDefaults().getColor("TextArea.selectionBackground"));
        btnTWReitem.setFont(new java.awt.Font("Noto Sans", 1, 16)); // NOI18N
        btnTWReitem.setText("Remove Item");
        btnTWReitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTWReitemActionPerformed(evt);
            }
        });

        jTableTW.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jTableTW.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "itemID", "ItemName", "Price", "Qty", "Total", "Code", "isStock"
            }
        ));
        jTableTW.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableTW.setRowHeight(15);
        jScrollPane1.setViewportView(jTableTW);
        if (jTableTW.getColumnModel().getColumnCount() > 0) {
            jTableTW.getColumnModel().getColumn(0).setMinWidth(0);
            jTableTW.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTableTW.getColumnModel().getColumn(0).setMaxWidth(0);
            jTableTW.getColumnModel().getColumn(1).setMinWidth(200);
            jTableTW.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTableTW.getColumnModel().getColumn(1).setMaxWidth(200);
            jTableTW.getColumnModel().getColumn(5).setMinWidth(0);
            jTableTW.getColumnModel().getColumn(5).setPreferredWidth(0);
            jTableTW.getColumnModel().getColumn(5).setMaxWidth(0);
            jTableTW.getColumnModel().getColumn(6).setMinWidth(0);
            jTableTW.getColumnModel().getColumn(6).setPreferredWidth(0);
            jTableTW.getColumnModel().getColumn(6).setMaxWidth(0);
        }

        jListTWCatagory.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jListTWCatagory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListTWCatagoryMouseClicked(evt);
            }
        });
        jListTWCatagory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jListTWCatagoryKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(jListTWCatagory);

        jLabel4.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel4.setText("Catagory");

        jListTWCaItem.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jListTWCaItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListTWCaItemMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jListTWCaItem);

        jLabel5.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel5.setText("Catagory Item");

        txtTWINVno.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N

        btnTWprintKOt1.setBackground(javax.swing.UIManager.getDefaults().getColor("TextArea.selectionBackground"));
        btnTWprintKOt1.setFont(new java.awt.Font("Noto Sans", 1, 16)); // NOI18N
        btnTWprintKOt1.setText("Checkout");
        btnTWprintKOt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTWprintKOt1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Noto Sans", 1, 16)); // NOI18N
        jLabel1.setText("Total Amount");

        txtTWsetTotal.setBackground(new java.awt.Color(8, 6, 6));
        txtTWsetTotal.setFont(new java.awt.Font("Noto Sans", 1, 16)); // NOI18N
        txtTWsetTotal.setForeground(java.awt.Color.green);
        txtTWsetTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtTWsetTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        comboCustomer.setEditable(true);
        comboCustomer.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N

        txtTOrderNoTW.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel12.setText("Order No");

        jButton1.setText("Add New Customer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(btnTWcancel, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnTWReitem, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(15, 15, 15)
                                    .addComponent(txtTWINVno, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(15, 15, 15)
                                    .addComponent(txtTOrderNoTW, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(29, 29, 29)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboCustomer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTWsetTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(btnTWprintKOt1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTWINVno, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtTOrderNoTW, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)))
                    .addComponent(txtTWsetTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTWReitem, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTWprintKOt1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTWcancel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("Take Away", jPanel1);

        jPanel2.setPreferredSize(new java.awt.Dimension(1024, 768));

        jListDCaItem.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jListDCaItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListDCaItemMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jListDCaItem);

        jListDCatagory.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jListDCatagory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListDCatagoryMouseClicked(evt);
            }
        });
        jListDCatagory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jListDCatagoryKeyPressed(evt);
            }
        });
        jScrollPane7.setViewportView(jListDCatagory);

        jLabel6.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel6.setText("Select Customer");

        jLabel7.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel7.setText("Invoice No");

        btnDcancel.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        btnDcancel.setText("Cancel");
        btnDcancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDcancelActionPerformed(evt);
            }
        });

        btnDReItem.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        btnDReItem.setText("Remove Item");
        btnDReItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDReItemActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel9.setText("Catagory Item");

        jLabel10.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel10.setText("Catagory");

        txtDSetinvNo.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel8.setText("Select Table");

        comboTable.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        comboTable.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Table 01", "Table 02", "Table 03", "Table 04", "Table 05", "Table 06", "Table 07", "Table 08", "Table 09", "Table 10" }));

        jLabel11.setFont(new java.awt.Font("Noto Sans", 1, 16)); // NOI18N
        jLabel11.setText("Total Amount");

        btnDCheckout1.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        btnDCheckout1.setText("Checkout");
        btnDCheckout1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDCheckout1ActionPerformed(evt);
            }
        });

        btnDprintKOt2.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        btnDprintKOt2.setText("Print KOT");
        btnDprintKOt2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDprintKOt2ActionPerformed(evt);
            }
        });

        jTableDN.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jTableDN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "itemID", "ItemName", "Price", "Qty", "Total", "Code", "isStock"
            }
        ));
        jTableDN.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableDN.setRowHeight(15);
        jScrollPane8.setViewportView(jTableDN);
        if (jTableDN.getColumnModel().getColumnCount() > 0) {
            jTableDN.getColumnModel().getColumn(0).setMinWidth(0);
            jTableDN.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTableDN.getColumnModel().getColumn(0).setMaxWidth(0);
            jTableDN.getColumnModel().getColumn(1).setMinWidth(200);
            jTableDN.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTableDN.getColumnModel().getColumn(1).setMaxWidth(200);
            jTableDN.getColumnModel().getColumn(5).setMinWidth(0);
            jTableDN.getColumnModel().getColumn(5).setPreferredWidth(0);
            jTableDN.getColumnModel().getColumn(5).setMaxWidth(0);
            jTableDN.getColumnModel().getColumn(6).setMinWidth(0);
            jTableDN.getColumnModel().getColumn(6).setPreferredWidth(0);
            jTableDN.getColumnModel().getColumn(6).setMaxWidth(0);
        }

        txtDNsetTotal.setBackground(java.awt.Color.black);
        txtDNsetTotal.setFont(new java.awt.Font("Noto Sans", 1, 16)); // NOI18N
        txtDNsetTotal.setForeground(java.awt.Color.green);
        txtDNsetTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtDNsetTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        comboCustomerDN.setEditable(true);
        comboCustomerDN.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        comboCustomerDN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCustomerDNActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel14.setText("Order No");

        txtOrderNoDN.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtOrderNoDN, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(txtDSetinvNo, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboTable, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboCustomerDN, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(2, 2, 2))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(106, 106, 106)
                                        .addComponent(btnDReItem, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnDcancel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addGap(159, 159, 159))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtDNsetTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnDprintKOt2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(btnDCheckout1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(15, 15, 15))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(517, 517, 517)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(11, 11, 11)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(417, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDSetinvNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtOrderNoDN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(57, 57, 57))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(comboTable, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboCustomerDN, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(txtDNsetTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDReItem, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDcancel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDprintKOt2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDCheckout1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addGap(149, 149, 149)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                        .addComponent(jScrollPane6))
                    .addGap(73, 73, 73)))
        );

        jTabbedPane1.addTab("Dine-In", jPanel2);

        jPanel3.setPreferredSize(new java.awt.Dimension(1024, 768));

        jTablePending.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jTablePending.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idInvoice", "InvoiceNO", "Table No", "Total"
            }
        ));
        jTablePending.setRowHeight(15);
        jScrollPane3.setViewportView(jTablePending);
        if (jTablePending.getColumnModel().getColumnCount() > 0) {
            jTablePending.getColumnModel().getColumn(0).setMinWidth(0);
            jTablePending.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTablePending.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        btnPendiComplte.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        btnPendiComplte.setText("Complete");
        btnPendiComplte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPendiComplteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnPendiComplte, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 872, Short.MAX_VALUE))
                .addGap(26, 26, 26))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPendiComplte, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );

        jTabbedPane1.addTab("Pending", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 913, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Dine In");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jListDCatagoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListDCatagoryKeyPressed


    }//GEN-LAST:event_jListDCatagoryKeyPressed

    private void jListDCatagoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListDCatagoryMouseClicked

        try {

            Session openSession = PoolManager.getSessionFactory().openSession();
            Criteria createCriteria = openSession.createCriteria(RawItems.class);
            createCriteria.add(Restrictions.eq("isDelete", "Active"));
            createCriteria.createAlias("rowItemCatagory", "r");
            createCriteria.add(Restrictions.eq("r.idRowItemCatagory", cato.get(jListDCatagory.getSelectedValue().toString())));
            createCriteria.addOrder(Order.asc("itemName"));
            List<RawItems> list = createCriteria.list();
            DefaultListModel<String> dl = new DefaultListModel<String>();
            for (RawItems rawItems : list) {

                dl.addElement(rawItems.getRawItemsCode() + "#" + rawItems.getItemName());
                ItemDataHolder itemDataHolder = new ItemDataHolder();
                itemDataHolder.setIdItem(rawItems.getIdRawItems());
                itemDataHolder.setItemName(rawItems.getItemName());
                itemDataHolder.setPrice(rawItems.getRawItemsSellingPrice());
                itemDataHolder.setCode(rawItems.getRawItemsCode());

                itemDataHolder.setIsStock(rawItems.getIsStock());

                ItemDataDN.put(rawItems.getRawItemsCode(), itemDataHolder);

            }

            jListDCaItem.setModel(dl);
            openSession.close();

        } catch (Exception e) {

            e.printStackTrace();

        }


    }//GEN-LAST:event_jListDCatagoryMouseClicked

    private void jListTWCatagoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListTWCatagoryKeyPressed

    }//GEN-LAST:event_jListTWCatagoryKeyPressed

    private void jListTWCatagoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListTWCatagoryMouseClicked

        try {

            Session openSession = PoolManager.getSessionFactory().openSession();
            Criteria createCriteria = openSession.createCriteria(RawItems.class);
            createCriteria.add(Restrictions.eq("isDelete", "Active"));
            createCriteria.createAlias("rowItemCatagory", "r");
            createCriteria.add(Restrictions.eq("r.idRowItemCatagory", cato.get(jListTWCatagory.getSelectedValue().toString())));
            createCriteria.addOrder(Order.asc("itemName"));
            List<RawItems> list = createCriteria.list();
            DefaultListModel<String> dl = new DefaultListModel<String>();
            for (RawItems rawItems : list) {

                dl.addElement(rawItems.getRawItemsCode() + "#" + rawItems.getItemName());
                ItemDataHolder itemDataHolder = new ItemDataHolder();
                itemDataHolder.setIdItem(rawItems.getIdRawItems());
                itemDataHolder.setItemName(rawItems.getItemName());
                itemDataHolder.setPrice(rawItems.getRawItemsSellingPrice());
                itemDataHolder.setCode(rawItems.getRawItemsCode());
                itemDataHolder.setIsStock(rawItems.getIsStock());
                ItemDataTW.put(rawItems.getRawItemsCode(), itemDataHolder);

            }

            jListTWCaItem.setModel(dl);
            openSession.close();

        } catch (Exception e) {

            e.printStackTrace();

        }

    }//GEN-LAST:event_jListTWCatagoryMouseClicked

    private void jListTWCaItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListTWCaItemMouseClicked

        AddInvoiceQTYTakeAway.ItemCode = jListTWCaItem.getSelectedValue().toString().split("#")[0];
        new AddInvoiceQTYTakeAway().setVisible(true);


    }//GEN-LAST:event_jListTWCaItemMouseClicked

    private void jListDCaItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListDCaItemMouseClicked

        AddInvoiceQTYDineIN.ItemCode = jListDCaItem.getSelectedValue().toString().split("#")[0];
        new AddInvoiceQTYDineIN().setVisible(true);

    }//GEN-LAST:event_jListDCaItemMouseClicked

    private void btnTWcancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTWcancelActionPerformed

        this.dispose();

    }//GEN-LAST:event_btnTWcancelActionPerformed

    private void btnTWReitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTWReitemActionPerformed

        javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel) jTableTW.getModel();
        dtm.removeRow(jTableTW.getSelectedRow());

        int x = jTableTW.getRowCount();
        if (x == 0) {
            txtTWsetTotal.setText("0.00");
        } else {
            Double sum = 0.00;
            for (int i = 0; i < dtm.getRowCount(); i++) {
                String s1 = dtm.getValueAt(i, 2).toString();
                Double getsum = Double.parseDouble(s1);
                sum = getsum + sum;
                txtTWsetTotal.setText(Decimal_Formats.Price(sum));
            }
        }

    }//GEN-LAST:event_btnTWReitemActionPerformed

    private void btnTWprintKOt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTWprintKOt1ActionPerformed
        String toString = null;
        try {
            toString = comboCustomer.getSelectedItem().toString();
        } catch (Exception e) {
        }
        if (toString != null) {

            new PaymentTakeAway().setVisible(true);

        } else {

            JOptionPane.showMessageDialog(null, "Select Customer");

        }
    }//GEN-LAST:event_btnTWprintKOt1ActionPerformed

    private void btnDReItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDReItemActionPerformed

//        int con = JOptionPane.showConfirmDialog(rootPane, "Are You Sure want to Delete?");
//
//        if (con == 0) {
//            Session openSession = PoolManager.getSessionFactory().openSession();
//            Criteria cr = openSession.createCriteria(Invoice.class);
//            cr.add(Restrictions.eq("Invoice", jTableDN.getValueAt(jTableDN.getSelectedRow(), 0)));
//            Transaction tr = openSession.beginTransaction();
//            Invoice uq = (Invoice) cr.uniqueResult();
//
//            if (uq != null) {
//
//                uq.setIsDelete("Deactive");
//                tr.commit();
//                loadInvTable();
//
//                NotificationPopup.Delete();
//
//            }
//        }
        javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel) jTableDN.getModel();
        dtm.removeRow(jTableDN.getSelectedRow());

        int x = jTableDN.getRowCount();
        if (x == 0) {
            txtDNsetTotal.setText("0.00");
        } else {
            Double sum = 0.00;
            for (int i = 0; i < dtm.getRowCount(); i++) {
                String s1 = dtm.getValueAt(i, 2).toString();
                Double getsum = Double.parseDouble(s1);
                sum = getsum + sum;
                txtDNsetTotal.setText(Decimal_Formats.Price(sum));
            }
        }


    }//GEN-LAST:event_btnDReItemActionPerformed

    private void btnDCheckout1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDCheckout1ActionPerformed
        String toString = null;
        try {
            toString = comboCustomerDN.getSelectedItem().toString();
        } catch (Exception e) {
        }
        if (toString != null) {

            new PaymentDineIN().setVisible(true);

        } else {

            JOptionPane.showMessageDialog(null, "Select Customer");

        }
    }//GEN-LAST:event_btnDCheckout1ActionPerformed

    private void btnDcancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDcancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnDcancelActionPerformed

    private void btnDprintKOt2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDprintKOt2ActionPerformed

        if (rowcount.get(txtDSetinvNo.getText()) == null) {

            rowcount.put(txtDSetinvNo.getText(), 0);

        }

        Session openSession = PoolManager.getSessionFactory().openSession();
        Transaction beginTransaction = openSession.beginTransaction();

        Table table = new Table();
        table.setIdTable(Table.get(comboTable.getSelectedItem().toString()));
        Invoice invoice = new Invoice();
        invoice.setInvoiceNo(newInvoiceArsh.txtDSetinvNo.getText());
        invoice.setInvoiceDate(dateForm.currentdate());
        invoice.setSubtotal(Double.parseDouble(txtDNsetTotal.getText()));
        invoice.setDiscount(Double.parseDouble("0.00"));
        invoice.setNetTotal(Double.parseDouble(txtDNsetTotal.getText()));
        invoice.setIsDelete("Active");
        invoice.setCreatedBy(LoginFrame.user);
        invoice.setInvoiceType("Pending");
        invoice.setInvoiceStatus("Pending");
        invoice.setInvoiceTime(dateForm.TimeNow());
        openSession.save(invoice);

        Kot kot = new Kot();
        kot.setCreatedBy(LoginFrame.user);
        kot.setDate(dateForm.currentdateTime());
        kot.setInvoice(invoice);
        kot.setKotno(newInvoiceArsh.txtDSetinvNo.getText());

        openSession.save(kot);

        InvoiceDailyOrderNo id = new InvoiceDailyOrderNo();
        id.setDaliyNo(newInvoiceArsh.DailyNoTW);
        id.setInvoice(invoice);
        id.setInvoiceDate(dateForm.currentdate());
        id.setIsDelete("Active");

        openSession.save(id);

        InvoiceHasTable iht = new InvoiceHasTable();
        iht.setInvoice(invoice);
        iht.setTable(table);

        openSession.save(iht);

        for (int i = 0; i < newInvoiceArsh.jTableDN.getRowCount(); i++) {

            RawItems rawItems = new RawItems();
            rawItems.setIdRawItems(Integer.parseInt(newInvoiceArsh.jTableDN.getValueAt(i, 0).toString()));

            InvoiceItems invoiceItems = new InvoiceItems();
            invoiceItems.setQty(Double.parseDouble(newInvoiceArsh.jTableDN.getValueAt(i, 3).toString()));
            invoiceItems.setUnitPrice(Double.parseDouble(newInvoiceArsh.jTableDN.getValueAt(i, 2).toString()));
            invoiceItems.setNetTotalItem(Double.parseDouble(newInvoiceArsh.jTableDN.getValueAt(i, 4).toString()));
            invoiceItems.setIsDelete("Active");
            invoiceItems.setInvoice(invoice);
            invoiceItems.setRawItems(rawItems);

            openSession.save(invoiceItems);

            Kotitems kotitems = new Kotitems();
            kotitems.setKot(kot);
            kotitems.setQty(newInvoiceArsh.jTableDN.getValueAt(i, 3).toString());
            kotitems.setRawItems(rawItems);

            openSession.save(kotitems);

            if (newInvoiceArsh.jTableDN.getValueAt(i, 6).toString().equals("YES")) {

                Criteria createCriteria = openSession.createCriteria(RawItemStock.class);
                createCriteria.createAlias("rawItems", "i");
                createCriteria.add(Restrictions.eq("i.idRawItems", Integer.parseInt(newInvoiceArsh.jTableDN.getValueAt(i, 0).toString())));
                RawItemStock uniqueResult = (RawItemStock) createCriteria.uniqueResult();
                if (uniqueResult != null) {

                    uniqueResult.setQty(uniqueResult.getQty() - Double.parseDouble(newInvoiceArsh.jTableDN.getValueAt(i, 3).toString()));
                    openSession.update(uniqueResult);
                }
            }

        }

        beginTransaction.commit();
        NotificationPopup.save();
        try {

            holder.clear();

            KOTHolder kotHolder0 = new KOTHolder();
            kotHolder0.setProducts("OKKKK");
            kotHolder0.setCost(0);
            kotHolder0.setOrder("00");

            holder.add(kotHolder0);
            
            System.out.println("Start Row"+rowcount.get(txtDSetinvNo.getText()));
            
            for (int i = rowcount.get(txtDSetinvNo.getText()); i < jTableDN.getRowCount(); i++) {

                Criteria createCriteria = openSession.createCriteria(RawItems.class);
                createCriteria.add(Restrictions.eq("idRawItems", jTableDN.getValueAt(i, 0)));
                RawItems uniqueResult = (RawItems) createCriteria.uniqueResult();

                if (uniqueResult != null) {
                    String foodItemCode = "";
                    Iterator iterator = uniqueResult.getFoodItemInfos().iterator();

                    while (iterator.hasNext()) {
                        FoodItemInfo next = (FoodItemInfo) iterator.next();
                        foodItemCode = next.getFoodItemCode();

                    }

                    KOTHolder kotHolder = new KOTHolder();
                    kotHolder.setProducts(foodItemCode);
                    kotHolder.setCost(Integer.parseInt(jTableDN.getValueAt(i, 3).toString()));
                    kotHolder.setOrder(txtOrderNoDN.getText());

                    holder.add(kotHolder);

                }

            }

            JRBeanCollectionDataSource bcd = new JRBeanCollectionDataSource(holder);

            Map<String, Object> map = new HashMap<String, Object>();
            map.put("Bean", bcd);
            System.out.println(map);
            JasperPrint jp = JasperFillManager.fillReport(LoginFrame.KOTDN, map, bcd);
//            JasperViewer.viewReport(jp, false);
            JasperPrintManager.printReport(jp, false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        openSession.close();
        javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel) newInvoiceArsh.jTableDN.getModel();
        txtDNsetTotal.setText("0.00");
        dtm.setRowCount(0);
        newInvoiceArsh.LoadInvNo();
        loadPendigInvoice();

    }//GEN-LAST:event_btnDprintKOt2ActionPerformed

    private void btnPendiComplteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPendiComplteActionPerformed
        int showConfirmDialog = JOptionPane.showConfirmDialog(null, "You Should Checkout or Print KOT agin for this invoice");

        if (showConfirmDialog == 0) {

            try {

                Session openSession = PoolManager.getSessionFactory().openSession();
//            Transaction beginTransaction = openSession.beginTransaction();
                Criteria createCriteria = openSession.createCriteria(Invoice.class);
                createCriteria.add(Restrictions.eq("isDelete", "Active"));
                createCriteria.add(Restrictions.eq("idInvoice", Integer.parseInt(jTablePending.getValueAt(jTablePending.getSelectedRow(), 0).toString())));
                Invoice uniqueResult = (Invoice) createCriteria.uniqueResult();
                javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel) jTableDN.getModel();
                String idTable = null;
                Integer KOT = 0;
                Integer Order = 0;

                if (uniqueResult != null) {

                    Iterator iterator = uniqueResult.getInvoiceHasTables().iterator();

                    while (iterator.hasNext()) {
                        InvoiceHasTable next = (InvoiceHasTable) iterator.next();
                        idTable = next.getTable().getTableNo();
                    }

                    Iterator iterator1 = uniqueResult.getKots().iterator();
                    while (iterator1.hasNext()) {
                        Kot next = (Kot) iterator1.next();
                        KOT = next.getIdKot();
                    }

                    txtDSetinvNo.setText(uniqueResult.getInvoiceNo());
                    txtDNsetTotal.setText(uniqueResult.getNetTotal() + "");
                    comboTable.setSelectedItem(idTable);
                    Iterator iterator2 = uniqueResult.getInvoiceDailyOrderNos().iterator();
                    while (iterator2.hasNext()) {
                        InvoiceDailyOrderNo object = (InvoiceDailyOrderNo) iterator2.next();
                        txtOrderNoDN.setText(object.getDaliyNo());
                        Order = object.getIdInvoiceDailyOrderNo();

                    }

                    Iterator it = uniqueResult.getInvoiceItemses().iterator();
                    while (it.hasNext()) {

                        InvoiceItems next = (InvoiceItems) it.next();
                        dtm.addRow(new Object[]{
                            next.getRawItems().getIdRawItems(),
                            next.getRawItems().getItemName(),
                            next.getRawItems().getRawItemsSellingPrice(),
                            next.getQty(),
                            next.getNetTotalItem(),
                            next.getRawItems().getRawItemsCode(),
                            next.getRawItems().getIsStock()

                        });
                    }

                }
                openSession.close();

                if (rowcount.get(txtDSetinvNo.getText()) == null) {

                    rowcount.put(txtDSetinvNo.getText(), 0);

                } else {

                    rowcount.put(txtDSetinvNo.getText(), jTableDN.getRowCount());

                }

                Session sess = PoolManager.getSessionFactory().openSession();

                Criteria cc0 = sess.createCriteria(Invoice.class);
                cc0.add(Restrictions.eq("idInvoice", uniqueResult.getIdInvoice()));
                Invoice uniqueResult0 = (Invoice) cc0.uniqueResult();
                uniqueResult0.setIsDelete("Deleted");
                sess.update(uniqueResult0);

                Criteria cc = sess.createCriteria(Kot.class);
                cc.add(Restrictions.eq("idKot", KOT));
                Kot uniqueResult1 = (Kot) cc.uniqueResult();
                uniqueResult1.setIsDelete("Delete");
                sess.update(uniqueResult1);

                Criteria cc2 = sess.createCriteria(InvoiceDailyOrderNo.class);
                cc2.add(Restrictions.eq("idInvoiceDailyOrderNo", Order));
                InvoiceDailyOrderNo uniqueResult2 = (InvoiceDailyOrderNo) cc2.uniqueResult();
                uniqueResult2.setIsDelete("Delete");
                sess.update(uniqueResult2);

                sess.beginTransaction().commit();
                sess.close();
                loadPendigInvoice();
            } catch (Exception e) {

                e.printStackTrace();

            }

        }

    }//GEN-LAST:event_btnPendiComplteActionPerformed

    private void comboCustomerDNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCustomerDNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboCustomerDNActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new AddCustomersUdaya1().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WebLookAndFeel.install();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new newInvoiceArsh().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDCheckout1;
    private javax.swing.JButton btnDReItem;
    private javax.swing.JButton btnDcancel;
    private javax.swing.JButton btnDprintKOt2;
    private javax.swing.JButton btnPendiComplte;
    private javax.swing.JButton btnTWReitem;
    private javax.swing.JButton btnTWcancel;
    private javax.swing.JButton btnTWprintKOt1;
    public static javax.swing.JComboBox<String> comboCustomer;
    public static javax.swing.JComboBox<String> comboCustomerDN;
    public static javax.swing.JComboBox comboTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jListDCaItem;
    private javax.swing.JList jListDCatagory;
    private javax.swing.JList jListTWCaItem;
    private javax.swing.JList jListTWCatagory;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    public static javax.swing.JTable jTableDN;
    private javax.swing.JTable jTablePending;
    public static javax.swing.JTable jTableTW;
    public static javax.swing.JLabel txtDNsetTotal;
    public static javax.swing.JLabel txtDSetinvNo;
    public static javax.swing.JLabel txtOrderNoDN;
    public static javax.swing.JLabel txtTOrderNoTW;
    public static javax.swing.JLabel txtTWINVno;
    public static javax.swing.JLabel txtTWsetTotal;
    // End of variables declaration//GEN-END:variables

    private void setmaximized() {

        if (maximized) {

            newInvoiceArsh.this.setExtendedState(JFrame.MAXIMIZED_BOTH);
            GraphicsEnvironment gv = GraphicsEnvironment.getLocalGraphicsEnvironment();
            newInvoiceArsh.this.setMaximizedBounds(gv.getMaximumWindowBounds());
            maximized = true;
        } else {

            setExtendedState(JFrame.NORMAL);
            maximized = false;

        }

    }

    private void tablerowset() {

        DefaultTableModel TW = new DefaultTableModel(null);

        jTableTW.setRowHeight(38);
        jTableDN.setRowHeight(38);
        jTablePending.setRowHeight(38);

    }

    private void loadCatogory() {

        try {

            Session openSession = PoolManager.getSessionFactory().openSession();
            Criteria createCriteria = openSession.createCriteria(RowItemCatagory.class);
            createCriteria.add(Restrictions.eq("catoType", "Food Item"));
            createCriteria.add(Restrictions.eq("isDelete", "Active"));
            createCriteria.addOrder(Order.asc("catagoryName"));
            List<RowItemCatagory> list = createCriteria.list();

            DefaultListModel<String> dl = new DefaultListModel<String>();

            dl.clear();
            for (RowItemCatagory rowItemCatagory : list) {

                dl.addElement(rowItemCatagory.getCatagoryName());

                cato.put(rowItemCatagory.getCatagoryName(), rowItemCatagory.getIdRowItemCatagory());

            }

            jListDCatagory.setModel(dl);
            jListTWCatagory.setModel(dl);

            openSession.close();

        } catch (Exception e) {

            e.printStackTrace();

        }

    }

    public static void LoadInvNo() {

        try {

            Session openSession = PoolManager.getSessionFactory().openSession();
            Criteria createCriteria = openSession.createCriteria(Invoice.class);
//            createCriteria.add(Restrictions.eq("isDelete", "Active"));
            createCriteria.setProjection(Projections.rowCount());
            List list = createCriteria.list();
            String get = list.get(0).toString();

            int parseInt = Integer.parseInt(get);
            parseInt++;

            txtDSetinvNo.setText("INV-" + parseInt);
            txtTWINVno.setText("INV-" + parseInt);

            LoadDailyNO();

        } catch (Exception e) {

            e.printStackTrace();

        }

    }

    public static void LoadDailyNO() {

        try {

            Session openSession = PoolManager.getSessionFactory().openSession();
            Criteria createCriteria = openSession.createCriteria(InvoiceDailyOrderNo.class);
            createCriteria.add(Restrictions.eq("invoiceDate", dateForm.currentdate()));
            createCriteria.add(Restrictions.eq("isDelete", "Active"));

            createCriteria.setProjection(Projections.rowCount());
            List list = createCriteria.list();
            Integer get = Integer.parseInt(list.get(0).toString());
            get++;
            DailyNoDN = get + "";
            DailyNoTW = get + "";

            txtTOrderNoTW.setText(DailyNoTW);
            txtOrderNoDN.setText(DailyNoDN);

            //System.out.println("DN " + DailyNoDN);
            //System.out.println("TW " + DailyNoTW);
        } catch (Exception e) {

            e.printStackTrace();

        }

    }

    public void comboFilter2(String enteredText) {
        List<String> filterArray = new ArrayList<String>();

        String str1 = "";

        try {

            if (enteredText.matches("\\d+")) {

                try {

                    Session openSession = PoolManager.getSessionFactory().openSession();
                    Criteria createCriteria = openSession.createCriteria(Customer.class);
                    createCriteria.add(Restrictions.like("contact1", "%" + enteredText + "%"));
                    createCriteria.add(Restrictions.eq("isDelete", "Active"));
                    List<Customer> list = createCriteria.list();

                    for (Customer customers : list) {
                        str1 = customers.getName() + " - " + customers.getContact1();
                        filterArray.add(str1);
                        cust.put(customers.getContact1(), customers.getIdCustomer());
                    }

                } catch (Exception e) {

                    e.printStackTrace();

                }

            } else {

                try {

                    Session openSession = PoolManager.getSessionFactory().openSession();
                    Criteria createCriteria = openSession.createCriteria(Customer.class);
                    createCriteria.add(Restrictions.like("name", "%" + enteredText + "%"));
                    createCriteria.add(Restrictions.eq("isDelete", "Active"));
                    List<Customer> list = createCriteria.list();

                    for (Customer customers : list) {

                        str1 = customers.getName() + " - " + customers.getContact1();
                        filterArray.add(str1);
                        cust.put(customers.getContact1(), customers.getIdCustomer());

                    }

                } catch (Exception e) {

                    e.printStackTrace();

                }

            }

        } catch (Exception ex) {
            //System.out.println("error" + ex);
        }

        if (filterArray.size() > 0) {
            comboCustomer.setModel(new DefaultComboBoxModel(filterArray.toArray()));
            comboCustomer.setSelectedItem(enteredText);
            comboCustomer.showPopup();
        } else {
            comboCustomer.hidePopup();
        }

    }

    private void ComboToTXT2() {
        final JTextField textfield0 = (JTextField) comboCustomer.getEditor().getEditorComponent();
        textfield0.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent ke) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        if (ke.getKeyCode() == 10) {

                        } else if (!(ke.getKeyCode() == KeyEvent.VK_BACK_SPACE || ke.getKeyCode() == KeyEvent.VK_DOWN || ke.getKeyCode() == KeyEvent.VK_UP)) {

                            comboFilter2(textfield0.getText());

                        }

                    }
                });

            }
        });
    }

    public void comboFilter2DN(String enteredText) {
        List<String> filterArray = new ArrayList<String>();

        String str1 = "";

        try {

            if (enteredText.matches("\\d+")) {

                try {

                    Session openSession = PoolManager.getSessionFactory().openSession();
                    Criteria createCriteria = openSession.createCriteria(Customer.class);
                    createCriteria.add(Restrictions.like("contact1", "%" + enteredText + "%"));
                    createCriteria.add(Restrictions.eq("isDelete", "Active"));
                    List<Customer> list = createCriteria.list();

                    for (Customer customers : list) {
                        str1 = customers.getName() + " - " + customers.getContact1();
                        filterArray.add(str1);
                        cust.put(customers.getContact1(), customers.getIdCustomer());
                    }

                } catch (Exception e) {

                    e.printStackTrace();

                }

            } else {

                try {

                    Session openSession = PoolManager.getSessionFactory().openSession();
                    Criteria createCriteria = openSession.createCriteria(Customer.class);
                    createCriteria.add(Restrictions.like("name", "%" + enteredText + "%"));
                    createCriteria.add(Restrictions.eq("isDelete", "Active"));
                    List<Customer> list = createCriteria.list();

                    for (Customer customers : list) {

                        str1 = customers.getName() + " - " + customers.getContact1();;
                        filterArray.add(str1);
                        cust.put(customers.getContact1(), customers.getIdCustomer());

                    }

                } catch (Exception e) {

                    e.printStackTrace();

                }

            }

        } catch (Exception ex) {
            //System.out.println("error" + ex);
        }

        if (filterArray.size() > 0) {
            comboCustomerDN.setModel(new DefaultComboBoxModel(filterArray.toArray()));
            comboCustomerDN.setSelectedItem(enteredText);
            comboCustomerDN.showPopup();
        } else {
            comboCustomerDN.hidePopup();
        }

    }

    private void ComboToTXT2DN() {
        final JTextField textfield0 = (JTextField) comboCustomerDN.getEditor().getEditorComponent();
        textfield0.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent ke) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        if (ke.getKeyCode() == 10) {

                        } else if (!(ke.getKeyCode() == KeyEvent.VK_BACK_SPACE || ke.getKeyCode() == KeyEvent.VK_DOWN || ke.getKeyCode() == KeyEvent.VK_UP)) {

                            comboFilter2DN(textfield0.getText());

                        }

                    }
                });

            }
        });
    }

    private void loadInvTable() {

        try {

            Session openSession = PoolManager.getSessionFactory().openSession();
            Criteria createCriteria = openSession.createCriteria(Table.class);
            comboTable.removeAllItems();
            List<Table> list = createCriteria.list();
            for (Table table : list) {

                comboTable.addItem(table.getTableNo());
                Table.put(table.getTableNo(), table.getIdTable());
            }
        } catch (Exception e) {

            e.printStackTrace();

        }

    }

    private void loadPendigInvoice() {

        try {

            Session openSession = PoolManager.getSessionFactory().openSession();
            Criteria createCriteria = openSession.createCriteria(Invoice.class);
            createCriteria.add(Restrictions.eq("invoiceStatus", "Pending"));
            createCriteria.add(Restrictions.eq("isDelete", "Active"));

            List<Invoice> list = createCriteria.list();

            javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel) jTablePending.getModel();
            dtm.setRowCount(0);

            String idTable = null;

            for (Invoice invoice : list) {

                Iterator iterator = invoice.getInvoiceHasTables().iterator();

                while (iterator.hasNext()) {
                    InvoiceHasTable next = (InvoiceHasTable) iterator.next();
                    idTable = next.getTable().getTableNo();
                }

                dtm.addRow(new Object[]{
                    invoice.getIdInvoice(),
                    invoice.getInvoiceNo(),
                    idTable,
                    invoice.getNetTotal()

                });

            }

            openSession.close();

        } catch (Exception e) {

            e.printStackTrace();

        }

    }

    private void tableAlign() {

        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
//        jTable1.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
//        jTable1.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
        jTableDN.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        jTableDN.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
        jTableDN.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        jTableTW.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        jTableTW.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
        jTableTW.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);

    }

}
