/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Customers;

import ClassPack.Excel;

import ClassPack.NotificationPopup;
import ClassPack.PoolManager;
import ORM.Customer;
import ORM.OrderItems;
import ORM.OrderStatus;
import ORM.Orders;
import com.alee.laf.WebLookAndFeel;
import java.io.File;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.LogicalExpression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author udaya
 */
public class ViewCusOrderUdaya extends javax.swing.JFrame {

    /**
     * Creates new form ViewCusOrder
     */
    public ViewCusOrderUdaya() {
        initComponents();
        tableDecor();
        jTable1.setComponentPopupMenu(jPopupMenu1);
        jTable1.setRowHeight(25);
        jTable2.setRowHeight(25);
        loadOrders();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnExel = new javax.swing.JButton();
        btnExel1 = new javax.swing.JButton();

        jMenuItem1.setText("Delete Order");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("View Customer Orders");

        jLabel1.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel1.setText("Search Here");

        txtSearch.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Order No", "Customer", "Order Date", "Delivery Date", "Total Price", "Status"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(1).setMinWidth(150);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(150);
            jTable1.getColumnModel().getColumn(2).setMinWidth(250);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(250);
        }

        jTable2.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Unit Price", "QTY", "Net Total"
            }
        ));
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setMinWidth(175);
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(175);
            jTable2.getColumnModel().getColumn(0).setMaxWidth(175);
            jTable2.getColumnModel().getColumn(2).setMinWidth(75);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(75);
            jTable2.getColumnModel().getColumn(2).setMaxWidth(75);
        }

        btnExel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnExel.setText("To Exel");
        btnExel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExelActionPerformed(evt);
            }
        });

        btnExel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnExel1.setText("To Exel");
        btnExel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExel1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnExel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnExel1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(15, 15, 15))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        try {
            Session openSession = PoolManager.getSessionFactory().openSession();

            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            char c = evt.getKeyChar();
            if (Character.isDigit(c)) {
                Criteria createCriteria = openSession.createCriteria(Orders.class);
                Criterion code = Restrictions.like("orderNo", "%" + txtSearch.getText() + "%");
                Criterion active = Restrictions.like("isDelete", "Active");
                LogicalExpression andExp = Restrictions.and(code, active);
                createCriteria.add(andExp);

                List<Orders> list = createCriteria.list();

                String stat = "N/A";
                for (Orders orders : list) {

                    Iterator iterator = orders.getOrderStatuses().iterator();
                    while (iterator.hasNext()) {
                        OrderStatus next = (OrderStatus) iterator.next();

                        stat = next.getStatus();
                        System.out.println(stat);
                    }

                    dtm.addRow(new Object[]{orders.getIdOrders(), orders.getOrderNo(),
                        orders.getCustomer().getName(), orders.getOrderDate(), orders.getDeliveryDate(),
                        orders.getOrderTotal(), stat});
                }

            } else {

                if (txtSearch.getText().length() >= 3) {

                    Criteria createCriteria = openSession.createCriteria(Customer.class);
                    Criterion code = Restrictions.like("name", "%" + txtSearch.getText() + "%");
                    Criterion active = Restrictions.like("isDelete", "Active");
                    LogicalExpression andExp = Restrictions.and(code, active);
                    createCriteria.add(andExp);
                    System.out.println("Start By Customer");
//                Customer cus = (Customer) createCriteria.uniqueResult();
                    List<Customer> list = createCriteria.list();
                    String stat = "N/A";

                    for (Customer customer : list) {
                        System.out.println("Loding Customers");
                        Iterator iterator = customer.getOrderses().iterator();

                        while (iterator.hasNext()) {
                            Orders next = (Orders) iterator.next();
                            System.out.println("Get Order List");
                            Iterator iterato = next.getOrderStatuses().iterator();
                            while (iterato.hasNext()) {
                                OrderStatus nex = (OrderStatus) iterato.next();
                                System.out.println("Get Order Status");
                                stat = nex.getStatus();
                                System.out.println(stat);
                            }
                            dtm.addRow(new Object[]{next.getIdOrders(),
                                next.getOrderNo(), next.getCustomer().getName(),
                                next.getOrderDate(), next.getDeliveryDate(),
                                next.getOrderTotal(), stat});

                        }
                    }
                }
            }
            openSession.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
            dtm.setRowCount(0);
            int x = jTable1.getSelectedRow();
            int y = Integer.parseInt(jTable1.getValueAt(x, 0).toString());

            Session openSession = PoolManager.getSessionFactory().openSession();
            Criteria createCriteria = openSession.createCriteria(OrderItems.class);
            createCriteria.createAlias("orders", "o");
            createCriteria.add(Restrictions.eq("o.idOrders", y));

            List<OrderItems> list = createCriteria.list();

            for (OrderItems oi : list) {
                dtm.addRow(new Object[]{oi.getRawItems().getItemName(), oi.getUnitPrice(), oi.getQty(), oi.getNetTotalOrdersItem()});
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {

            int showConfirmDialog = JOptionPane.showConfirmDialog(null, "Do you want to Delete?",
                    "", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (showConfirmDialog == 0) {
                DefaultTableModel dtm1 = (DefaultTableModel) jTable1.getModel();
                DefaultTableModel dtm2 = (DefaultTableModel) jTable2.getModel();
                int x = jTable1.getSelectedRow();
                String orderId = (jTable1.getValueAt(x, 0).toString());

                Session openSession = PoolManager.getSessionFactory().openSession();

                Transaction beginTransaction = openSession.beginTransaction();

                Criteria createCriteria = openSession.createCriteria(Orders.class);

                createCriteria.add(Restrictions.eq("idOrders", Integer.parseInt(orderId)));

                Orders order = (Orders) createCriteria.uniqueResult();

                order.setIsDelete("Deactive");

                openSession.update(order);
                beginTransaction.commit();
                openSession.close();
                NotificationPopup.save();

                dtm1.removeRow(x);
                dtm2.setRowCount(0);

            } else {

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        if (evt.getButton() == 3) {
            jPopupMenu1.show();
        }
    }//GEN-LAST:event_jTable1MouseReleased

    private void btnExelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExelActionPerformed

        try {

            JFileChooser fc = new JFileChooser();
            int showDialog = fc.showSaveDialog(null);;
            File sf = fc.getSelectedFile();
            String path = sf.getAbsolutePath();
            path = path.replace('\\', '/');

            Excel.toExcel(jTable1, new File(path + ".xlsx"));
        } catch (Exception ex) {
            Logger.getLogger(ViewCusOrderUdaya.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnExelActionPerformed

    private void btnExel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExel1ActionPerformed

        try {

            JFileChooser fc = new JFileChooser();
            int showDialog = fc.showSaveDialog(null);;
            File sf = fc.getSelectedFile();
            String path = sf.getAbsolutePath();
            path = path.replace('\\', '/');

            Excel.toExcel(jTable2, new File(path + ".xlsx"));
        } catch (Exception ex) {
            Logger.getLogger(ViewCusOrderUdaya.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnExel1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WebLookAndFeel.install();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewCusOrderUdaya().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExel;
    private javax.swing.JButton btnExel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void tableDecor() {

        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.RIGHT);
        jTable1.getColumnModel().getColumn(5).setCellRenderer(dtcr);

        jTable2.getColumnModel().getColumn(1).setCellRenderer(dtcr);
        jTable2.getColumnModel().getColumn(2).setCellRenderer(dtcr);
        jTable2.getColumnModel().getColumn(3).setCellRenderer(dtcr);

    }

    private void loadOrders() {
        Session openSession = PoolManager.getSessionFactory().openSession();

        Criteria createCriteria = openSession.createCriteria(Orders.class);
//        Criterion code = Restrictions.like("orderNo", "%" + txtSearch.getText() + "%");
        Criterion active = Restrictions.eq("isDelete", "Active");
//        LogicalExpression andExp = Restrictions.and(code, active);
        createCriteria.add(active);
        createCriteria.addOrder(Order.desc("deliveryDate"));
        List<Orders> list = createCriteria.list();

        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        String stat = "N/A";
        for (Orders orders : list) {

            Iterator iterator = orders.getOrderStatuses().iterator();
            while (iterator.hasNext()) {
                OrderStatus next = (OrderStatus) iterator.next();

                stat = next.getStatus();
//                System.out.println(stat);
            }

            dtm.addRow(new Object[]{orders.getIdOrders(),
                orders.getOrderNo(), orders.getCustomer().getName(),
                orders.getOrderDate(), orders.getDeliveryDate(),
                orders.getOrderTotal(),
                stat
            });

        }

    }

}
