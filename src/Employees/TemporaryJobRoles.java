/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Employees;

import ClassPack.NotificationPopup;
import ClassPack.PoolManager;
import static InvoiceAndGRN.AddGRNODK.comboItemName;
import static InvoiceAndGRN.AddGRNODK.comboSupllier;
import ORM.Employees;
import ORM.Jobroals;
import ORM.RawItems;
import ORM.TmpemployeesHasJobroals;
import com.alee.laf.WebLookAndFeel;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author arshak
 */
public class TemporaryJobRoles extends javax.swing.JFrame {

    Map<String, Integer> empid = new HashMap();
    Map<String, Integer> jobid = new HashMap();

    /**
     * Creates new form TemporaryJobRoles
     */
    public TemporaryJobRoles() {
        initComponents();
        EmpcombotoTXT();
        EmpcombotoTXT2();
        EmpcombotoTXT23();
        jTable1.setRowHeight(30);
        jTable1.setComponentPopupMenu(jPopupMenu1);
        setmaximized();
         loa();
    }
    static boolean maximized = true;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        empcombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        TxtStartDate = new com.alee.extended.date.WebDateField();
        TxtToDate1 = new com.alee.extended.date.WebDateField();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jMenu1.setText("jMenu1");

        jMenuItem1.setText("Delete");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Assign Temporary Job Roles");

        jLabel1.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel1.setText("Select Employee");

        empcombo.setEditable(true);
        empcombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empcomboActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel2.setText("Select Job Role");

        jComboBox2.setEditable(true);
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel3.setText("From Date");

        TxtStartDate.setDateFormat(new SimpleDateFormat
            ("dd/MM/yyyy"));
        TxtStartDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TxtStartDateMouseClicked(evt);
            }
        });

        TxtToDate1.setDateFormat(new SimpleDateFormat
            ("dd/MM/yyyy"));
        TxtToDate1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TxtToDate1MouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel4.setText("To Date");

        jButton1.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(empcombo, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TxtStartDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(TxtToDate1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(50, 50, 50))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(empcombo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtToDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel5.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel5.setText("Select Employee");

        jComboBox3.setEditable(true);
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee Name", "Nic", "Jobrole", "From Date", "To Date", "idtemp"
            }
        ));
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(5).setMinWidth(0);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(5).setMaxWidth(0);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(40, 40, 40))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1)
                .addGap(41, 41, 41))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void empcomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empcomboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_empcomboActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void TxtStartDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TxtStartDateMouseClicked

    }//GEN-LAST:event_TxtStartDateMouseClicked

    private void TxtToDate1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TxtToDate1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtToDate1MouseClicked

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            if (empcombo.getSelectedIndex() != -1 && jComboBox2.getSelectedIndex() != -1 && !TxtStartDate.getText().isEmpty() && !TxtToDate1.getText().isEmpty()) {
                Session sess = PoolManager.getSessionFactory().openSession();
                Transaction tr = sess.beginTransaction();
                Jobroals jobroals = new Jobroals();
                jobroals.setIdJobroals(jobid.get(jComboBox2.getSelectedItem().toString().split("-")[0]));
                Employees emp = new Employees();
                System.out.println(empid.get(empcombo.getSelectedItem().toString().split("-")[0]));
                System.out.println(jobid.get(jComboBox2.getSelectedItem().toString().split("-")[0]));
                emp.setIdEmployees(empid.get(empcombo.getSelectedItem().toString().split("-")[1]));
                TmpemployeesHasJobroals tmp = new TmpemployeesHasJobroals();
                tmp.setEmployees(emp);
                tmp.setJobroals(jobroals);
                tmp.setStartDate(TxtStartDate.getText());
                tmp.setEndDate(TxtToDate1.getText());
                tmp.setIsDelete("Active");
                sess.save(tmp);
                tr.commit();

                if (tr.wasCommitted()) {

                    NotificationPopup.save();

                    TxtStartDate.setText(null);
                    TxtToDate1.setText(null);
                    jComboBox2.setSelectedIndex(-1);
                    empcombo.setSelectedIndex(-1);
                }

                sess.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased

        int button = evt.getKeyCode();

        if (button == 3) {

            jPopupMenu1.show();

        }
    }//GEN-LAST:event_jTable1KeyReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        int i = JOptionPane.showConfirmDialog(rootPane, "Are You Sure want to Delete");

        if (i == 0) {
            try {
                Session sess = PoolManager.getSessionFactory().openSession();
                Criteria cr = sess.createCriteria(TmpemployeesHasJobroals.class);
                Transaction tr = sess.beginTransaction();

                cr.add(Restrictions.eq("id", jTable1.getValueAt(jTable1.getSelectedRow(), 5)));
                TmpemployeesHasJobroals uniqueResult = (TmpemployeesHasJobroals) cr.uniqueResult();

                if (uniqueResult != null) {

                    uniqueResult.setIsDelete("Deactive");

                    sess.update(uniqueResult);
                    tr.commit();
                    loa();

                    NotificationPopup.Delete();

                }
                sess.close();

            } catch (Exception e) {

                e.printStackTrace();

            }
        }


    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        WebLookAndFeel.install();
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TemporaryJobRoles().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static com.alee.extended.date.WebDateField TxtStartDate;
    public static com.alee.extended.date.WebDateField TxtToDate1;
    private javax.swing.JComboBox empcombo;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    public void comboFilter2(String enteredText) {

        List<String> filterArray = new ArrayList<String>();

        String str1 = "";

        try {

            Session openSession = PoolManager.getSessionFactory().openSession();
            Criteria createCriteria = openSession.createCriteria(Employees.class);
            createCriteria.add(Restrictions.eq("isDelete", "Active"));
            List<Employees> list = createCriteria.list();

            createCriteria.add(Restrictions.like("employeName", "%" + enteredText + "%"));

            for (Employees employees : list) {
                str1 = employees.getEmployeName() + "-" + employees.getEmployeeNic();
                empid.put(employees.getEmployeeNic(), employees.getIdEmployees());
                filterArray.add(str1);
            }
            openSession.close();
//            createCriteria.add(Restrictions.eq("isStock", "YES"));
////            createCriteria.createAlias("brands", "b");
////            createCriteria.add(Restrictions.eq("b.idBrands", bra.get(comboBrands.getSelectedItem().toString())));
//            createCriteria.add(Restrictions.like("itemName", "%" + enteredText + "%"));
//            List<RawItems> list = createCriteria.list();
//            comboItemName.removeAllItems();
//
//            for (RawItems rawItems : list) {
//
//                str1 = rawItems.getRawItemsCode() + "#" + rawItems.getItemName() + "#" + rawItems.getRawItemsUnitPrice();
//                item.put(rawItems.getRawItemsCode(), rawItems.getIdRawItems());
//
//                filterArray.add(str1);
//
//            }
        } catch (Exception ex) {
            System.out.println("error" + ex);
        }

        if (filterArray.size() > 0) {
            empcombo.setModel(new DefaultComboBoxModel(filterArray.toArray()));
            empcombo.setSelectedItem(enteredText);
            empcombo.showPopup();
        } else {
            empcombo.hidePopup();
        }
    }

    private void EmpcombotoTXT() {

        final JTextField textfield = (JTextField) empcombo.getEditor().getEditorComponent();
        textfield.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent ke) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        if (ke.getKeyCode() == 10) {

                            try {
//                                comboItemCode.setSelectedItem(comboItemName.getSelectedItem().toString().split(" - ")[1]);
//                                loadPriceVariation();

                            } catch (Exception e) {
                            }

                        } else if (!(ke.getKeyCode() == KeyEvent.VK_BACK_SPACE || ke.getKeyCode() == KeyEvent.VK_DOWN || ke.getKeyCode() == KeyEvent.VK_UP)) {

                            comboFilter2(textfield.getText());

                        }

                    }
                });

            }
        });

    }

    //-------------------
    public void comboFilter22(String enteredText) {

        List<String> filterArray = new ArrayList<String>();

        String str1 = "";

        try {

            Session openSession = PoolManager.getSessionFactory().openSession();
            Criteria createCriteria = openSession.createCriteria(Employees.class);
            createCriteria.add(Restrictions.eq("isDelete", "Active"));
            List<Employees> list = createCriteria.list();

            createCriteria.add(Restrictions.like("employeName", "%" + enteredText + "%"));

            for (Employees employees : list) {
                str1 = employees.getEmployeName() + "-" + employees.getEmployeeNic();
                empid.put(employees.getEmployeeNic(), employees.getIdEmployees());
                filterArray.add(str1);
            }
            openSession.close();

//            createCriteria.add(Restrictions.eq("isStock", "YES"));
////            createCriteria.createAlias("brands", "b");
////            createCriteria.add(Restrictions.eq("b.idBrands", bra.get(comboBrands.getSelectedItem().toString())));
//            createCriteria.add(Restrictions.like("itemName", "%" + enteredText + "%"));
//            List<RawItems> list = createCriteria.list();
//            comboItemName.removeAllItems();
//
//            for (RawItems rawItems : list) {
//
//                str1 = rawItems.getRawItemsCode() + "#" + rawItems.getItemName() + "#" + rawItems.getRawItemsUnitPrice();
//                item.put(rawItems.getRawItemsCode(), rawItems.getIdRawItems());
//
//                filterArray.add(str1);
//
//            }
        } catch (Exception ex) {
            System.out.println("error" + ex);
        }

        if (filterArray.size() > 0) {
            jComboBox3.setModel(new DefaultComboBoxModel(filterArray.toArray()));
            jComboBox3.setSelectedItem(enteredText);
            jComboBox3.showPopup();
        } else {
            jComboBox3.hidePopup();
        }
    }

    private void EmpcombotoTXT2() {

        final JTextField textfield = (JTextField) jComboBox3.getEditor().getEditorComponent();
        textfield.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent ke) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        if (ke.getKeyCode() == 10) {

                            loa();

                        } else if (!(ke.getKeyCode() == KeyEvent.VK_BACK_SPACE || ke.getKeyCode() == KeyEvent.VK_DOWN || ke.getKeyCode() == KeyEvent.VK_UP)) {

                            comboFilter22(textfield.getText());

                        }

                    }
                });

            }
        });

    }

    //----------------------------------------------------------------
    public void comboFilter223(String enteredText) {

        List<String> filterArray = new ArrayList<String>();

        String str1 = "";

        try {
//            Session openSession = PoolManager.getSessionFactory().openSession();
//            Criteria createCriteria = openSession.createCriteria(Employees.class);
//            createCriteria.add(Restrictions.eq("isDelete", "Active"));
//            List<Employees> list = createCriteria.list();
//            
//            createCriteria.add(Restrictions.like("employeName", "%"+enteredText+"%"));
//
//            
//            for (Employees employees : list) {
//                str1=employees.getEmployeName()+"-"+employees.getEmployeeNic();
//                empid.put(employees.getEmployeeNic(), employees.getIdEmployees());
//                filterArray.add(str1);
//            }
            Session sess = PoolManager.getSessionFactory().openSession();
            Criteria cr = sess.createCriteria(Jobroals.class);
            cr.add(Restrictions.eq("isDelete", "Active"));
            cr.add(Restrictions.like("roleName", "%" + enteredText + "%"));
            List<Jobroals> list = cr.list();
            for (Jobroals jobroals : list) {

                str1 = jobroals.getJobcode() + "-" + jobroals.getRoleName();
                jobid.put(jobroals.getJobcode(), jobroals.getIdJobroals());
                filterArray.add(str1);

            }
sess.close();
        } catch (Exception ex) {
            System.out.println("error" + ex);
        }

        if (filterArray.size() > 0) {
            jComboBox2.setModel(new DefaultComboBoxModel(filterArray.toArray()));
            jComboBox2.setSelectedItem(enteredText);
            jComboBox2.showPopup();
        } else {
            jComboBox2.hidePopup();
        }
    }

    private void EmpcombotoTXT23() {

        final JTextField textfield = (JTextField) jComboBox2.getEditor().getEditorComponent();
        textfield.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent ke) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        if (ke.getKeyCode() == 10) {

                            try {
//                                comboItemCode.setSelectedItem(comboItemName.getSelectedItem().toString().split(" - ")[1]);
//                                loadPriceVariation();

                            } catch (Exception e) {
                            }

                        } else if (!(ke.getKeyCode() == KeyEvent.VK_BACK_SPACE || ke.getKeyCode() == KeyEvent.VK_DOWN || ke.getKeyCode() == KeyEvent.VK_UP)) {

                            comboFilter223(textfield.getText());

                        }

                    }
                });

            }
        });

    }

    private void setmaximized() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

        if (maximized) {

            this.setExtendedState(JFrame.MAXIMIZED_BOTH);
            GraphicsEnvironment gv = GraphicsEnvironment.getLocalGraphicsEnvironment();
            this.setMaximizedBounds(gv.getMaximumWindowBounds());
            maximized = true;
        } else {

            setExtendedState(JFrame.NORMAL);
            maximized = false;

        }

    }

    private void loa() {

        try {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            Session sess = PoolManager.getSessionFactory().openSession();
            Criteria cr = sess.createCriteria(TmpemployeesHasJobroals.class);
            cr.add(Restrictions.eq("isDelete", "Active"));
            cr.addOrder(Order.desc("endDate"));
//            cr.createAlias("employees", "e");
//            cr.add(Restrictions.eq("e.idEmployees", empid.get(jComboBox3.getSelectedItem().toString().split("-")[1])));
            List<TmpemployeesHasJobroals> list = cr.list();

            for (TmpemployeesHasJobroals tmp : list) {
                Vector v = new Vector();
                v.add(tmp.getEmployees().getEmployeName());
                v.add(tmp.getEmployees().getEmployeeNic());
                v.add(tmp.getJobroals().getRoleName());
                v.add(tmp.getStartDate());
                v.add(tmp.getEndDate());
                v.add(tmp.getId());
                dtm.addRow(v);

            }
            sess.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

}
