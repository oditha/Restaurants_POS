package Suppliers;

import ClassPack.NotificationPopup;
import ClassPack.PoolManager;
import ClassPack.dateForm;
import ORM.CashBook;
import ORM.RawGrn;
import ORM.RawItemStock;
import ORM.RawItems;
import ORM.Supplier;
import ORM.RowGrnItem;
import ORM.SupReturnTerms;
import ORM.SupplierReturn;
import com.alee.laf.WebLookAndFeel;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.LogicalExpression;
import org.hibernate.criterion.Restrictions;

public class GrnReturnUdaya extends javax.swing.JFrame {

    HashMap<String, Integer> invid = new HashMap();
    HashMap<String, Integer> ItmId = new HashMap();
    HashMap<String, Integer> Itm = new HashMap();

    public int getGRNID;
    public int getItemID;
    public int getGRNItemID;
    public int getSupID;
    public double UnitPrice;

    public GrnReturnUdaya() {
        initComponents();
        TxtStartDate.setText(dateForm.currentdate());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtGRNNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboItem = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        txtQty = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        TxtStartDate = new com.alee.extended.date.WebDateField();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GRN Return");

        jLabel1.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel1.setText("GRN No");

        txtGRNNo.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        txtGRNNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtGRNNoKeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel3.setText("Date from");

        jLabel2.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel2.setText("Select Item");

        comboItem.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel9.setText("Return Qty");

        txtQty.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        txtQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQtyKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel6.setText("Description");

        btnSave.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        btnSave.setText("Add Return");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        txtDescription.setColumns(20);
        txtDescription.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        txtDescription.setRows(5);
        jScrollPane1.setViewportView(txtDescription);

        TxtStartDate.setDateFormat(new SimpleDateFormat("yyyy/MM/dd"));
        TxtStartDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TxtStartDateMouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel4.setText("Return Term");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash back", "Item exchange" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboItem, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(txtGRNNo, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(136, 136, 136)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtGRNNo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboItem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel4))
                        .addGap(3, 3, 3)
                        .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        setSize(new java.awt.Dimension(410, 506));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtGRNNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGRNNoKeyReleased

        try {

            String text = txtGRNNo.getText();

            Session openSession = PoolManager.getSessionFactory().openSession();
            Criteria createCriteria = openSession.createCriteria(RawGrn.class);

            Criterion id = Restrictions.eq("rawGrnNo", text);
            Criterion active1 = Restrictions.like("isDelete", "Active");
            LogicalExpression andExp1 = Restrictions.and(id, active1);
            createCriteria.add(andExp1);

            RawGrn inv = (RawGrn) createCriteria.uniqueResult();

            invid.put(inv.getRawGrnNo(), inv.getIdRawGrn());
            Iterator iterator = inv.getRowGrnItems().iterator();
            comboItem.removeAllItems();
            ItmId.clear();
            Itm.clear();
            while (iterator.hasNext()) {

                RowGrnItem next = (RowGrnItem) iterator.next();
                comboItem.addItem(next.getRawItems().getRawItemsCode() + " - " + next.getRawItems().getItemName());

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtGRNNoKeyReleased

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {

            if ((!txtGRNNo.getText().isEmpty() && !txtQty.getText().isEmpty())) {

                String text = txtGRNNo.getText();

                Session openSession = PoolManager.getSessionFactory().openSession();
                Criteria createCriteria = openSession.createCriteria(RawGrn.class);
                createCriteria.add(Restrictions.eq("rawGrnNo", text));
                RawGrn inv = (RawGrn) createCriteria.uniqueResult();

                List<RawGrn> list = createCriteria.list();

                for (RawGrn grn : list) {
                    getGRNID = grn.getIdRawGrn();
                    getSupID = grn.getSupplier().getIdSupplier();

//                    System.out.println(getSupID);
                }

                //////////////////////////////////////////////////////////////////////////////////////
                String[] getItemCode = comboItem.getSelectedItem().toString().split(" ");
                String s = getItemCode[0];
                //System.out.println(s);
                Session openSession1 = PoolManager.getSessionFactory().openSession();
                Criteria createCriteria1 = openSession1.createCriteria(RawItems.class);
                createCriteria1.add(Restrictions.eq("rawItemsCode", s));
                RawItems item = (RawItems) createCriteria1.uniqueResult();

                List<RawItems> list1 = createCriteria1.list();

                for (RawItems item1 : list1) {
                    getItemID = item1.getIdRawItems();
                    //System.out.println(getItemID);
                }

                //////////////////////////////////////////////////////////////////////////////////////
                Session openSession2 = PoolManager.getSessionFactory().openSession();
                Criteria createCriteria2 = openSession2.createCriteria(RowGrnItem.class);
                createCriteria2.createAlias("rawItems", "i");
                createCriteria2.add(Restrictions.eq("i.idRawItems", getItemID));
 
//                RowGrnItem grnItem = (RowGrnItem) createCriteria2.uniqueResult();

                List<RowGrnItem> list2 = createCriteria2.list();

                for (RowGrnItem grnitem : list2) {
                    getGRNItemID = grnitem.getIdRowGrnItem();
                    //System.out.println(getGRNItemID);
                    UnitPrice = grnitem.getGrossPrice();
                }

                /////////////////////////////////////////////////////////////////////////////////
                Session openSession4 = PoolManager.getSessionFactory().openSession();
                Transaction beginTransaction = openSession4.beginTransaction();

                SupplierReturn SupReturn = new SupplierReturn();

                RowGrnItem GRNItem = new RowGrnItem();
                GRNItem.setIdRowGrnItem(getGRNItemID);

                Supplier sup = new Supplier();
                sup.setIdSupplier(getSupID);

                SupReturn.setReturnDate(TxtStartDate.getText());
                SupReturn.setSupplier(sup);
                SupReturn.setQty(Double.parseDouble(txtQty.getText()));
                SupReturn.setRowGrnItem(GRNItem);
                SupReturn.setIsDelete("Active");
                SupReturn.setDescription(txtDescription.getText());

                SupReturnTerms supReturnTerms = new SupReturnTerms();

                supReturnTerms.setSupplierReturn(SupReturn);
                supReturnTerms.setReturnTerm(jComboBox1.getSelectedItem().toString());
                supReturnTerms.setIsDelete("Active");

                openSession4.save(SupReturn);
                openSession4.save(supReturnTerms);

                beginTransaction.commit();

                openSession.close();
                openSession1.close();
                openSession2.close();
                openSession4.close();

                if (jComboBox1.getSelectedIndex() == 0) {
                    Session openSession6 = PoolManager.getSessionFactory().openSession();
                    Transaction beginTransaction1 = openSession6.beginTransaction();
                    Criteria c = openSession6.createCriteria(RawItemStock.class);

                    c.createAlias("rawItems", "ri");
                    c.add(Restrictions.eq("ri.idRawItems", getItemID));
                    RawItemStock ur = (RawItemStock) c.uniqueResult();

                    System.out.println(ur.getQty());

                    ur.setQty(ur.getQty() - Double.parseDouble(txtQty.getText()));

                    openSession6.update(ur);
                    
                    CashBook cashBook = new CashBook();
                    
                    cashBook.setDate(TxtStartDate.getText());
                    cashBook.setIncome(UnitPrice * Double.parseDouble(txtQty.getText()));
                    cashBook.setExpence(0.00);
                    cashBook.setDescription("GRN RETURN -" + jComboBox1.getSelectedItem().toString());
                    
                    openSession6.save(cashBook);

                    beginTransaction1.commit();
                    openSession6.close();
                }

                NotificationPopup.save();

                txtGRNNo.setText("");
                txtQty.setText("");
                txtGRNNo.grabFocus();
                comboItem.removeAllItems();
                txtDescription.setText("");

            } else {
                NotificationPopup.fillFeilds();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void TxtStartDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TxtStartDateMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtStartDateMouseClicked

    private void txtQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyTyped
        char c = evt.getKeyChar();

        if (!((Character.isDigit(c)) || (c == KeyEvent.VK_PERIOD) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {

            evt.consume();

        }
    }//GEN-LAST:event_txtQtyKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WebLookAndFeel.install();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GrnReturnUdaya().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.alee.extended.date.WebDateField TxtStartDate;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> comboItem;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtGRNNo;
    private javax.swing.JTextField txtQty;
    // End of variables declaration//GEN-END:variables

}
