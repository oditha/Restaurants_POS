package MainMenu;

import ClassPack.NotificationPopup;
import ClassPack.PoolManager;
import static MainMenu.ResetPasswordUdaya.txtPasswordReset;
import ORM.Employees;
import ORM.Login;
import com.alee.laf.WebLookAndFeel;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

public class AddUserUdaya extends javax.swing.JFrame {

    public static int getUserID;
    public static String getPassword;

    Map<String, Integer> employee = new HashMap();

    public AddUserUdaya() {
        initComponents();
        lablePassword.setVisible(false);
        loadUser();
        //ComboToTXT2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        comboEmployee = new javax.swing.JComboBox<>();
        txtUserName = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        txtRePassword = new javax.swing.JPasswordField();
        comboUserType = new javax.swing.JComboBox<>();
        btnReset = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        lablePassword = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add User");

        jLabel9.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel9.setText("Select Employee");

        jLabel11.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel11.setText("User Name");

        jLabel13.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel13.setText("Password");

        jLabel12.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel12.setText("Re-Enter Password");

        jLabel8.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel8.setText("User Type");

        comboEmployee.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        comboEmployee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select employee--" }));
        comboEmployee.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboEmployeePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboEmployeeActionPerformed(evt);
            }
        });

        txtUserName.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        txtUserName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUserNameKeyReleased(evt);
            }
        });

        txtPassword.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N

        txtRePassword.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        txtRePassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRePasswordKeyReleased(evt);
            }
        });

        comboUserType.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        comboUserType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Owner", "Cashier", "Admin" }));

        btnReset.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        btnReset.setText("Reset Password");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13)
                    .addComponent(jLabel12)
                    .addComponent(jLabel8))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtRePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lablePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(comboUserType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel9)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel11)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel13)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(txtRePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(lablePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboUserType, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSave)
                    .addComponent(btnReset))
                .addContainerGap(109, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtUserNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserNameKeyReleased

        try {

            Session sess = PoolManager.getSessionFactory().openSession();
            Criteria cr = sess.createCriteria(Login.class);

            cr.add(Restrictions.eq("userName", txtUserName.getText()));

            Login uniqueResult = (Login) cr.uniqueResult();

            if (uniqueResult != null) {
                comboEmployee.setSelectedItem(uniqueResult.getEmployees().getEmployeeNic() + " - " + uniqueResult.getEmployees().getEmployeName());
                txtUserName.setText(uniqueResult.getUserName());
                txtPassword.setText("*********");
                txtRePassword.setText("*********");
                comboUserType.setSelectedItem(uniqueResult.getPrivilage());
                btnSave.setText("Update");
                getUserID = uniqueResult.getIdLogin();
                getPassword = uniqueResult.getPassWord();

                txtPassword.setEnabled(true);
                txtRePassword.setText(null);
            } else {
                lablePassword.setVisible(false);
                txtPassword.setText("");
                txtRePassword.setText("");
//                comboEmployee.setSelectedIndex(0);
                comboUserType.setSelectedIndex(0);
                btnSave.setText("Save");

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_txtUserNameKeyReleased

    private void txtRePasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRePasswordKeyReleased
        if (txtPassword.getText().equals(txtRePassword.getText())) {
            lablePassword.setVisible(true);
            lablePassword.setText("Correct Password");
            lablePassword.setForeground(Color.GREEN);
        } else {
            lablePassword.setVisible(true);
            lablePassword.setText("Incorrect Password");
            lablePassword.setForeground(Color.RED);
        }
    }//GEN-LAST:event_txtRePasswordKeyReleased

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed

        if (btnSave.getText().equals("Update")) {
            ResetPasswordUdaya rp = new ResetPasswordUdaya();
            rp.setVisible(true);
            txtPasswordReset.setText(getPassword);
            clearTXT();
            btnSave.setText("Save");
        }

    }//GEN-LAST:event_btnResetActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {

            if (btnSave.getText().equals("Save")) {

                if (comboEmployee.getSelectedIndex() == 0 || txtUserName.getText().isEmpty() || txtPassword.getText().isEmpty() || txtRePassword.getText().isEmpty()) {
                    NotificationPopup.fillFeilds();
                } else {

                    if (txtPassword.getText().equals(txtRePassword.getText())) {
                        Session openSession = PoolManager.getSessionFactory().openSession();
                        Transaction beginTransaction = openSession.beginTransaction();


                        String s = comboEmployee.getSelectedItem().toString().split(" - ")[0];

                        
                        Employees employees = new Employees();
                        employees.setIdEmployees(employee.get(s));
                        System.out.println(comboEmployee.getSelectedItem());

                        Login login = new Login();
                        login.setUserName(txtUserName.getText());
                        login.setPassWord(txtPassword.getText());
                        login.setPrivilage(comboUserType.getSelectedItem().toString());
                        login.setIsDelete("Active");
                        login.setEmployees(employees);

                        openSession.save(login);
                        beginTransaction.commit();
                        openSession.close();
                        NotificationPopup.save();
                        clearTXT();
                        loadUser();

                    } else {
                        lablePassword.setVisible(true);
                        lablePassword.setText("Incorrect Password");
                        lablePassword.setForeground(Color.RED);
                    }

                }

            } else if (btnSave.getText().equals("Update")) {

                if (comboEmployee.getSelectedIndex() == 0 ||  txtUserName.getText().isEmpty() || txtRePassword.getText().isEmpty()) {
                    NotificationPopup.fillFeilds();
                } else {

                    if (txtPassword.getText().equals(txtRePassword.getText())) {
                        Session openSession = PoolManager.getSessionFactory().openSession();
                        Transaction beginTransaction = openSession.beginTransaction();
                        Criteria createCriteria = openSession.createCriteria(Login.class);
                        System.out.println(getUserID);
                        createCriteria.add(Restrictions.eq("idtable1", getUserID));
                        Login user = (Login) createCriteria.uniqueResult();

                        user.setUserName(txtUserName.getText());
                        user.setPrivilage(comboUserType.getSelectedItem().toString());

                        openSession.update(user);
                        beginTransaction.commit();
                        openSession.close();
                        NotificationPopup.save();
                        clearTXT();

                        txtPassword.setEnabled(true);
                        txtRePassword.setEnabled(true);
                        btnSave.setText("Save");

                        loadUser();
                    } else {
                        lablePassword.setVisible(true);
                        lablePassword.setText("Incorrect Password");
                        lablePassword.setForeground(Color.RED);
                    }

                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void comboEmployeePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboEmployeePopupMenuWillBecomeInvisible
        try {

            String getID = comboEmployee.getSelectedItem().toString().split(" - ")[0];

            Session sess = PoolManager.getSessionFactory().openSession();
            Criteria cr = sess.createCriteria(Employees.class);

            cr.add(Restrictions.eq("employeeNic", getID));

            Employees uniqueResult = (Employees) cr.uniqueResult();

            if (uniqueResult != null) {

                Iterator iterator = uniqueResult.getLogins().iterator();

                while (iterator.hasNext()) {
                    Login next = (Login) iterator.next();
                    txtUserName.setText(next.getUserName());
                    txtPassword.setText("*********");
                    txtRePassword.setText("*********");
                    comboUserType.setSelectedItem(next.getPrivilage());
                    btnSave.setText("Update");
                    getUserID = next.getIdLogin();
                    getPassword = next.getPassWord();
                    System.out.println(getUserID);

                    txtPassword.setEnabled(true);
                    txtRePassword.setText(null);

                }

            } else {
                lablePassword.setVisible(false);
                txtUserName.setText("");
                txtPassword.setText("");
                comboEmployee.setSelectedIndex(0);
                comboUserType.setSelectedIndex(0);
                btnSave.setText("Save");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_comboEmployeePopupMenuWillBecomeInvisible

    private void comboEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboEmployeeActionPerformed

    }//GEN-LAST:event_comboEmployeeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        WebLookAndFeel.install();

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddUserUdaya().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> comboEmployee;
    private javax.swing.JComboBox<String> comboUserType;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lablePassword;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtRePassword;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

    private void loadUser() {

        try {

            Session openSession = PoolManager.getSessionFactory().openSession();
            Criteria createCriteria = openSession.createCriteria(Employees.class);
            createCriteria.add(Restrictions.like("isDelete", "Active"));

            List<Employees> list = createCriteria.list();

            for (Employees emp : list) {
                employee.put(emp.getEmployeeNic(), emp.getIdEmployees());
                comboEmployee.addItem(emp.getEmployeeNic() + " - " + emp.getEmployeName());

            }
            openSession.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void ComboToTXT2() {

        final JTextField textfield0 = (JTextField) comboEmployee.getEditor().getEditorComponent();
        textfield0.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent ke) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        if (ke.getKeyCode() == 10) {

                            //settotal();
                        } else if (!(ke.getKeyCode() == KeyEvent.VK_BACK_SPACE || ke.getKeyCode() == KeyEvent.VK_DOWN || ke.getKeyCode() == KeyEvent.VK_UP)) {

                            comboFilter2(textfield0.getText());

                        }

                    }
                });

            }
        });

    }

    public void comboFilter2(String enteredText) {
        List<String> filterArray = new ArrayList<String>();

        String str1 = "";

        try {

            if (enteredText.matches("\\d+")) {

                try {

                    Session openSession = PoolManager.getSessionFactory().openSession();
                    Criteria createCriteria = openSession.createCriteria(Employees.class);
                    createCriteria.add(Restrictions.like("employeeContactNo", "%" + enteredText + "%"));
                    createCriteria.add(Restrictions.eq("isDelete", "Active"));
                    List<Employees> list = createCriteria.list();

                    for (Employees em : list) {
                        str1 = em.getEmployeName() + " - " + em.getEmployeeNic();
                        filterArray.add(str1);
                        employee.put(em.getEmployeeContactNo(), em.getIdEmployees());
                        comboEmployee.addItem(str1);
                    }

                } catch (Exception e) {

                    e.printStackTrace();

                }

            } else {

                try {

                    Session openSession = PoolManager.getSessionFactory().openSession();
                    Criteria createCriteria = openSession.createCriteria(Employees.class);
                    createCriteria.add(Restrictions.like("employeName", "%" + enteredText + "%"));
                    createCriteria.add(Restrictions.eq("isDelete", "Active"));
                    List<Employees> list = createCriteria.list();

                    for (Employees em : list) {

                        str1 = em.getEmployeName() + " - " + em.getEmployeeNic();
                        filterArray.add(str1);
                        employee.put(em.getEmployeeContactNo(), em.getIdEmployees());
                        comboEmployee.addItem(str1);

                    }

                } catch (Exception e) {

                    e.printStackTrace();

                }

            }

        } catch (Exception ex) {
            System.out.println("error" + ex);
        }

        if (filterArray.size() > 0) {
            comboEmployee.setModel(new DefaultComboBoxModel(filterArray.toArray()));
            comboEmployee.setSelectedItem(enteredText);
            comboEmployee.showPopup();
        } else {
            comboEmployee.hidePopup();
        }

    }

    private void clearTXT() {
        lablePassword.setVisible(false);
        txtUserName.setText("");
        txtPassword.setText("");
        txtRePassword.setText("");
        comboUserType.setSelectedIndex(0);

    }

}
